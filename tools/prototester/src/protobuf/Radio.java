package protobuf;

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Radio.proto

public final class Radio {
  private Radio() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface RadioProtocolWrapperOrBuilder extends
      // @@protoc_insertion_point(interface_extends:RadioProtocolWrapper)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .RadioProtocolCommand command = 1;</code>
     *
     * <pre>
     * repeated RobotSettings robotsettings = 2;
     * optional BasestationSettings basesettings = 3;
     * </pre>
     */
    java.util.List<Radio.RadioProtocolCommand> 
        getCommandList();
    /**
     * <code>repeated .RadioProtocolCommand command = 1;</code>
     *
     * <pre>
     * repeated RobotSettings robotsettings = 2;
     * optional BasestationSettings basesettings = 3;
     * </pre>
     */
    Radio.RadioProtocolCommand getCommand(int index);
    /**
     * <code>repeated .RadioProtocolCommand command = 1;</code>
     *
     * <pre>
     * repeated RobotSettings robotsettings = 2;
     * optional BasestationSettings basesettings = 3;
     * </pre>
     */
    int getCommandCount();
    /**
     * <code>repeated .RadioProtocolCommand command = 1;</code>
     *
     * <pre>
     * repeated RobotSettings robotsettings = 2;
     * optional BasestationSettings basesettings = 3;
     * </pre>
     */
    java.util.List<? extends Radio.RadioProtocolCommandOrBuilder> 
        getCommandOrBuilderList();
    /**
     * <code>repeated .RadioProtocolCommand command = 1;</code>
     *
     * <pre>
     * repeated RobotSettings robotsettings = 2;
     * optional BasestationSettings basesettings = 3;
     * </pre>
     */
    Radio.RadioProtocolCommandOrBuilder getCommandOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code RadioProtocolWrapper}
   */
  public static final class RadioProtocolWrapper extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:RadioProtocolWrapper)
      RadioProtocolWrapperOrBuilder {
    // Use RadioProtocolWrapper.newBuilder() to construct.
    private RadioProtocolWrapper(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RadioProtocolWrapper(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RadioProtocolWrapper defaultInstance;
    public static RadioProtocolWrapper getDefaultInstance() {
      return defaultInstance;
    }

    public RadioProtocolWrapper getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RadioProtocolWrapper(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                command_ = new java.util.ArrayList<Radio.RadioProtocolCommand>();
                mutable_bitField0_ |= 0x00000001;
              }
              command_.add(input.readMessage(Radio.RadioProtocolCommand.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          command_ = java.util.Collections.unmodifiableList(command_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Radio.internal_static_RadioProtocolWrapper_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Radio.internal_static_RadioProtocolWrapper_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Radio.RadioProtocolWrapper.class, Radio.RadioProtocolWrapper.Builder.class);
    }

    public static com.google.protobuf.Parser<RadioProtocolWrapper> PARSER =
        new com.google.protobuf.AbstractParser<RadioProtocolWrapper>() {
      public RadioProtocolWrapper parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RadioProtocolWrapper(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RadioProtocolWrapper> getParserForType() {
      return PARSER;
    }

    public static final int COMMAND_FIELD_NUMBER = 1;
    private java.util.List<Radio.RadioProtocolCommand> command_;
    /**
     * <code>repeated .RadioProtocolCommand command = 1;</code>
     *
     * <pre>
     * repeated RobotSettings robotsettings = 2;
     * optional BasestationSettings basesettings = 3;
     * </pre>
     */
    public java.util.List<Radio.RadioProtocolCommand> getCommandList() {
      return command_;
    }
    /**
     * <code>repeated .RadioProtocolCommand command = 1;</code>
     *
     * <pre>
     * repeated RobotSettings robotsettings = 2;
     * optional BasestationSettings basesettings = 3;
     * </pre>
     */
    public java.util.List<? extends Radio.RadioProtocolCommandOrBuilder> 
        getCommandOrBuilderList() {
      return command_;
    }
    /**
     * <code>repeated .RadioProtocolCommand command = 1;</code>
     *
     * <pre>
     * repeated RobotSettings robotsettings = 2;
     * optional BasestationSettings basesettings = 3;
     * </pre>
     */
    public int getCommandCount() {
      return command_.size();
    }
    /**
     * <code>repeated .RadioProtocolCommand command = 1;</code>
     *
     * <pre>
     * repeated RobotSettings robotsettings = 2;
     * optional BasestationSettings basesettings = 3;
     * </pre>
     */
    public Radio.RadioProtocolCommand getCommand(int index) {
      return command_.get(index);
    }
    /**
     * <code>repeated .RadioProtocolCommand command = 1;</code>
     *
     * <pre>
     * repeated RobotSettings robotsettings = 2;
     * optional BasestationSettings basesettings = 3;
     * </pre>
     */
    public Radio.RadioProtocolCommandOrBuilder getCommandOrBuilder(
        int index) {
      return command_.get(index);
    }

    private void initFields() {
      command_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getCommandCount(); i++) {
        if (!getCommand(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream org.ssh.senders)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < command_.size(); i++) {
        org.ssh.senders.writeMessage(1, command_.get(i));
      }
      getUnknownFields().writeTo(org.ssh.senders);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < command_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, command_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static Radio.RadioProtocolWrapper parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Radio.RadioProtocolWrapper parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Radio.RadioProtocolWrapper parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Radio.RadioProtocolWrapper parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Radio.RadioProtocolWrapper parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Radio.RadioProtocolWrapper parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static Radio.RadioProtocolWrapper parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static Radio.RadioProtocolWrapper parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static Radio.RadioProtocolWrapper parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Radio.RadioProtocolWrapper parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Radio.RadioProtocolWrapper prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code RadioProtocolWrapper}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:RadioProtocolWrapper)
        Radio.RadioProtocolWrapperOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Radio.internal_static_RadioProtocolWrapper_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Radio.internal_static_RadioProtocolWrapper_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Radio.RadioProtocolWrapper.class, Radio.RadioProtocolWrapper.Builder.class);
      }

      // Construct using Radio.RadioProtocolWrapper.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getCommandFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (commandBuilder_ == null) {
          command_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          commandBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Radio.internal_static_RadioProtocolWrapper_descriptor;
      }

      public Radio.RadioProtocolWrapper getDefaultInstanceForType() {
        return Radio.RadioProtocolWrapper.getDefaultInstance();
      }

      public Radio.RadioProtocolWrapper build() {
        Radio.RadioProtocolWrapper result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Radio.RadioProtocolWrapper buildPartial() {
        Radio.RadioProtocolWrapper result = new Radio.RadioProtocolWrapper(this);
        if (commandBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            command_ = java.util.Collections.unmodifiableList(command_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.command_ = command_;
        } else {
          result.command_ = commandBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Radio.RadioProtocolWrapper) {
          return mergeFrom((Radio.RadioProtocolWrapper)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Radio.RadioProtocolWrapper other) {
        if (other == Radio.RadioProtocolWrapper.getDefaultInstance()) return this;
        if (commandBuilder_ == null) {
          if (!other.command_.isEmpty()) {
            if (command_.isEmpty()) {
              command_ = other.command_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCommandIsMutable();
              command_.addAll(other.command_);
            }
            onChanged();
          }
        } else {
          if (!other.command_.isEmpty()) {
            if (commandBuilder_.isEmpty()) {
              commandBuilder_.dispose();
              commandBuilder_ = null;
              command_ = other.command_;
              bitField0_ = (bitField0_ & ~0x00000001);
              commandBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getCommandFieldBuilder() : null;
            } else {
              commandBuilder_.addAllMessages(other.command_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getCommandCount(); i++) {
          if (!getCommand(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Radio.RadioProtocolWrapper parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Radio.RadioProtocolWrapper) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<Radio.RadioProtocolCommand> command_ =
        java.util.Collections.emptyList();
      private void ensureCommandIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          command_ = new java.util.ArrayList<Radio.RadioProtocolCommand>(command_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          Radio.RadioProtocolCommand, Radio.RadioProtocolCommand.Builder, Radio.RadioProtocolCommandOrBuilder> commandBuilder_;

      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public java.util.List<Radio.RadioProtocolCommand> getCommandList() {
        if (commandBuilder_ == null) {
          return java.util.Collections.unmodifiableList(command_);
        } else {
          return commandBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public int getCommandCount() {
        if (commandBuilder_ == null) {
          return command_.size();
        } else {
          return commandBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public Radio.RadioProtocolCommand getCommand(int index) {
        if (commandBuilder_ == null) {
          return command_.get(index);
        } else {
          return commandBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public Builder setCommand(
          int index, Radio.RadioProtocolCommand value) {
        if (commandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommandIsMutable();
          command_.set(index, value);
          onChanged();
        } else {
          commandBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public Builder setCommand(
          int index, Radio.RadioProtocolCommand.Builder builderForValue) {
        if (commandBuilder_ == null) {
          ensureCommandIsMutable();
          command_.set(index, builderForValue.build());
          onChanged();
        } else {
          commandBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public Builder addCommand(Radio.RadioProtocolCommand value) {
        if (commandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommandIsMutable();
          command_.add(value);
          onChanged();
        } else {
          commandBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public Builder addCommand(
          int index, Radio.RadioProtocolCommand value) {
        if (commandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommandIsMutable();
          command_.add(index, value);
          onChanged();
        } else {
          commandBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public Builder addCommand(
          Radio.RadioProtocolCommand.Builder builderForValue) {
        if (commandBuilder_ == null) {
          ensureCommandIsMutable();
          command_.add(builderForValue.build());
          onChanged();
        } else {
          commandBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public Builder addCommand(
          int index, Radio.RadioProtocolCommand.Builder builderForValue) {
        if (commandBuilder_ == null) {
          ensureCommandIsMutable();
          command_.add(index, builderForValue.build());
          onChanged();
        } else {
          commandBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public Builder addAllCommand(
          java.lang.Iterable<? extends Radio.RadioProtocolCommand> values) {
        if (commandBuilder_ == null) {
          ensureCommandIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, command_);
          onChanged();
        } else {
          commandBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public Builder clearCommand() {
        if (commandBuilder_ == null) {
          command_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          commandBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public Builder removeCommand(int index) {
        if (commandBuilder_ == null) {
          ensureCommandIsMutable();
          command_.remove(index);
          onChanged();
        } else {
          commandBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public Radio.RadioProtocolCommand.Builder getCommandBuilder(
          int index) {
        return getCommandFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public Radio.RadioProtocolCommandOrBuilder getCommandOrBuilder(
          int index) {
        if (commandBuilder_ == null) {
          return command_.get(index);  } else {
          return commandBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public java.util.List<? extends Radio.RadioProtocolCommandOrBuilder> 
           getCommandOrBuilderList() {
        if (commandBuilder_ != null) {
          return commandBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(command_);
        }
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public Radio.RadioProtocolCommand.Builder addCommandBuilder() {
        return getCommandFieldBuilder().addBuilder(
            Radio.RadioProtocolCommand.getDefaultInstance());
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public Radio.RadioProtocolCommand.Builder addCommandBuilder(
          int index) {
        return getCommandFieldBuilder().addBuilder(
            index, Radio.RadioProtocolCommand.getDefaultInstance());
      }
      /**
       * <code>repeated .RadioProtocolCommand command = 1;</code>
       *
       * <pre>
       * repeated RobotSettings robotsettings = 2;
       * optional BasestationSettings basesettings = 3;
       * </pre>
       */
      public java.util.List<Radio.RadioProtocolCommand.Builder> 
           getCommandBuilderList() {
        return getCommandFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          Radio.RadioProtocolCommand, Radio.RadioProtocolCommand.Builder, Radio.RadioProtocolCommandOrBuilder> 
          getCommandFieldBuilder() {
        if (commandBuilder_ == null) {
          commandBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              Radio.RadioProtocolCommand, Radio.RadioProtocolCommand.Builder, Radio.RadioProtocolCommandOrBuilder>(
                  command_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          command_ = null;
        }
        return commandBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:RadioProtocolWrapper)
    }

    static {
      defaultInstance = new RadioProtocolWrapper(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:RadioProtocolWrapper)
  }

  public interface RadioProtocolCommandOrBuilder extends
      // @@protoc_insertion_point(interface_extends:RadioProtocolCommand)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 robot_id = 1;</code>
     *
     * <pre>
     * The unique ID of the robot, as identified by SSL-Vision.
     * </pre>
     */
    boolean hasRobotId();
    /**
     * <code>required int32 robot_id = 1;</code>
     *
     * <pre>
     * The unique ID of the robot, as identified by SSL-Vision.
     * </pre>
     */
    int getRobotId();

    /**
     * <code>required float velocity_x = 2;</code>
     *
     * <pre>
     * Desired forward drive velocity in meters / second.
     * </pre>
     */
    boolean hasVelocityX();
    /**
     * <code>required float velocity_x = 2;</code>
     *
     * <pre>
     * Desired forward drive velocity in meters / second.
     * </pre>
     */
    float getVelocityX();

    /**
     * <code>required float velocity_y = 3;</code>
     *
     * <pre>
     * Desired sideways left drive velocity in meters / second.
     * </pre>
     */
    boolean hasVelocityY();
    /**
     * <code>required float velocity_y = 3;</code>
     *
     * <pre>
     * Desired sideways left drive velocity in meters / second.
     * </pre>
     */
    float getVelocityY();

    /**
     * <code>required float velocity_r = 4;</code>
     *
     * <pre>
     * Desired counter-clockwise angular velocity in radians / second.
     * </pre>
     */
    boolean hasVelocityR();
    /**
     * <code>required float velocity_r = 4;</code>
     *
     * <pre>
     * Desired counter-clockwise angular velocity in radians / second.
     * </pre>
     */
    float getVelocityR();

    /**
     * <code>optional float flat_kick = 5;</code>
     *
     * <pre>
     * Desired flat kick speed, in meters / second.
     * If this optional field is missing, then no flat kick command should be
     * sent.
     * </pre>
     */
    boolean hasFlatKick();
    /**
     * <code>optional float flat_kick = 5;</code>
     *
     * <pre>
     * Desired flat kick speed, in meters / second.
     * If this optional field is missing, then no flat kick command should be
     * sent.
     * </pre>
     */
    float getFlatKick();

    /**
     * <code>optional float chip_kick = 6;</code>
     *
     * <pre>
     * Desired chip kick distance, in meters.
     * If this optional field is missing, then no flat kick command should be
     * sent. If this field is present along with the flat_kick field, the
     * flat_kick command takes precedence.
     * </pre>
     */
    boolean hasChipKick();
    /**
     * <code>optional float chip_kick = 6;</code>
     *
     * <pre>
     * Desired chip kick distance, in meters.
     * If this optional field is missing, then no flat kick command should be
     * sent. If this field is present along with the flat_kick field, the
     * flat_kick command takes precedence.
     * </pre>
     */
    float getChipKick();

    /**
     * <code>optional float dribbler_spin = 7;</code>
     *
     * <pre>
     * Desired dribbler spin, from -1 to +1, where -1 is the maximum reverse-spin
     * that can be imparted to the ball, and +1 is the maximum forward-spin
     * that can be imparted to the ball.
     * </pre>
     */
    boolean hasDribblerSpin();
    /**
     * <code>optional float dribbler_spin = 7;</code>
     *
     * <pre>
     * Desired dribbler spin, from -1 to +1, where -1 is the maximum reverse-spin
     * that can be imparted to the ball, and +1 is the maximum forward-spin
     * that can be imparted to the ball.
     * </pre>
     */
    float getDribblerSpin();

    /**
     * <code>optional int32 distance = 8;</code>
     *
     * <pre>
     * remaining distance to destination in mm
     * </pre>
     */
    boolean hasDistance();
    /**
     * <code>optional int32 distance = 8;</code>
     *
     * <pre>
     * remaining distance to destination in mm
     * </pre>
     */
    int getDistance();
  }
  /**
   * Protobuf type {@code RadioProtocolCommand}
   */
  public static final class RadioProtocolCommand extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:RadioProtocolCommand)
      RadioProtocolCommandOrBuilder {
    // Use RadioProtocolCommand.newBuilder() to construct.
    private RadioProtocolCommand(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RadioProtocolCommand(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RadioProtocolCommand defaultInstance;
    public static RadioProtocolCommand getDefaultInstance() {
      return defaultInstance;
    }

    public RadioProtocolCommand getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RadioProtocolCommand(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              robotId_ = input.readInt32();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              velocityX_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              velocityY_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              velocityR_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              flatKick_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              chipKick_ = input.readFloat();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              dribblerSpin_ = input.readFloat();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              distance_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Radio.internal_static_RadioProtocolCommand_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Radio.internal_static_RadioProtocolCommand_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Radio.RadioProtocolCommand.class, Radio.RadioProtocolCommand.Builder.class);
    }

    public static com.google.protobuf.Parser<RadioProtocolCommand> PARSER =
        new com.google.protobuf.AbstractParser<RadioProtocolCommand>() {
      public RadioProtocolCommand parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RadioProtocolCommand(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RadioProtocolCommand> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ROBOT_ID_FIELD_NUMBER = 1;
    private int robotId_;
    /**
     * <code>required int32 robot_id = 1;</code>
     *
     * <pre>
     * The unique ID of the robot, as identified by SSL-Vision.
     * </pre>
     */
    public boolean hasRobotId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 robot_id = 1;</code>
     *
     * <pre>
     * The unique ID of the robot, as identified by SSL-Vision.
     * </pre>
     */
    public int getRobotId() {
      return robotId_;
    }

    public static final int VELOCITY_X_FIELD_NUMBER = 2;
    private float velocityX_;
    /**
     * <code>required float velocity_x = 2;</code>
     *
     * <pre>
     * Desired forward drive velocity in meters / second.
     * </pre>
     */
    public boolean hasVelocityX() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float velocity_x = 2;</code>
     *
     * <pre>
     * Desired forward drive velocity in meters / second.
     * </pre>
     */
    public float getVelocityX() {
      return velocityX_;
    }

    public static final int VELOCITY_Y_FIELD_NUMBER = 3;
    private float velocityY_;
    /**
     * <code>required float velocity_y = 3;</code>
     *
     * <pre>
     * Desired sideways left drive velocity in meters / second.
     * </pre>
     */
    public boolean hasVelocityY() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required float velocity_y = 3;</code>
     *
     * <pre>
     * Desired sideways left drive velocity in meters / second.
     * </pre>
     */
    public float getVelocityY() {
      return velocityY_;
    }

    public static final int VELOCITY_R_FIELD_NUMBER = 4;
    private float velocityR_;
    /**
     * <code>required float velocity_r = 4;</code>
     *
     * <pre>
     * Desired counter-clockwise angular velocity in radians / second.
     * </pre>
     */
    public boolean hasVelocityR() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required float velocity_r = 4;</code>
     *
     * <pre>
     * Desired counter-clockwise angular velocity in radians / second.
     * </pre>
     */
    public float getVelocityR() {
      return velocityR_;
    }

    public static final int FLAT_KICK_FIELD_NUMBER = 5;
    private float flatKick_;
    /**
     * <code>optional float flat_kick = 5;</code>
     *
     * <pre>
     * Desired flat kick speed, in meters / second.
     * If this optional field is missing, then no flat kick command should be
     * sent.
     * </pre>
     */
    public boolean hasFlatKick() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float flat_kick = 5;</code>
     *
     * <pre>
     * Desired flat kick speed, in meters / second.
     * If this optional field is missing, then no flat kick command should be
     * sent.
     * </pre>
     */
    public float getFlatKick() {
      return flatKick_;
    }

    public static final int CHIP_KICK_FIELD_NUMBER = 6;
    private float chipKick_;
    /**
     * <code>optional float chip_kick = 6;</code>
     *
     * <pre>
     * Desired chip kick distance, in meters.
     * If this optional field is missing, then no flat kick command should be
     * sent. If this field is present along with the flat_kick field, the
     * flat_kick command takes precedence.
     * </pre>
     */
    public boolean hasChipKick() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float chip_kick = 6;</code>
     *
     * <pre>
     * Desired chip kick distance, in meters.
     * If this optional field is missing, then no flat kick command should be
     * sent. If this field is present along with the flat_kick field, the
     * flat_kick command takes precedence.
     * </pre>
     */
    public float getChipKick() {
      return chipKick_;
    }

    public static final int DRIBBLER_SPIN_FIELD_NUMBER = 7;
    private float dribblerSpin_;
    /**
     * <code>optional float dribbler_spin = 7;</code>
     *
     * <pre>
     * Desired dribbler spin, from -1 to +1, where -1 is the maximum reverse-spin
     * that can be imparted to the ball, and +1 is the maximum forward-spin
     * that can be imparted to the ball.
     * </pre>
     */
    public boolean hasDribblerSpin() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float dribbler_spin = 7;</code>
     *
     * <pre>
     * Desired dribbler spin, from -1 to +1, where -1 is the maximum reverse-spin
     * that can be imparted to the ball, and +1 is the maximum forward-spin
     * that can be imparted to the ball.
     * </pre>
     */
    public float getDribblerSpin() {
      return dribblerSpin_;
    }

    public static final int DISTANCE_FIELD_NUMBER = 8;
    private int distance_;
    /**
     * <code>optional int32 distance = 8;</code>
     *
     * <pre>
     * remaining distance to destination in mm
     * </pre>
     */
    public boolean hasDistance() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 distance = 8;</code>
     *
     * <pre>
     * remaining distance to destination in mm
     * </pre>
     */
    public int getDistance() {
      return distance_;
    }

    private void initFields() {
      robotId_ = 0;
      velocityX_ = 0F;
      velocityY_ = 0F;
      velocityR_ = 0F;
      flatKick_ = 0F;
      chipKick_ = 0F;
      dribblerSpin_ = 0F;
      distance_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasRobotId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVelocityX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVelocityY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVelocityR()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream org.ssh.senders)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        org.ssh.senders.writeInt32(1, robotId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        org.ssh.senders.writeFloat(2, velocityX_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        org.ssh.senders.writeFloat(3, velocityY_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        org.ssh.senders.writeFloat(4, velocityR_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        org.ssh.senders.writeFloat(5, flatKick_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        org.ssh.senders.writeFloat(6, chipKick_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        org.ssh.senders.writeFloat(7, dribblerSpin_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        org.ssh.senders.writeInt32(8, distance_);
      }
      getUnknownFields().writeTo(org.ssh.senders);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, robotId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, velocityX_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, velocityY_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, velocityR_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, flatKick_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, chipKick_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, dribblerSpin_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, distance_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static Radio.RadioProtocolCommand parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Radio.RadioProtocolCommand parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Radio.RadioProtocolCommand parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Radio.RadioProtocolCommand parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Radio.RadioProtocolCommand parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Radio.RadioProtocolCommand parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static Radio.RadioProtocolCommand parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static Radio.RadioProtocolCommand parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static Radio.RadioProtocolCommand parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Radio.RadioProtocolCommand parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Radio.RadioProtocolCommand prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code RadioProtocolCommand}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:RadioProtocolCommand)
        Radio.RadioProtocolCommandOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Radio.internal_static_RadioProtocolCommand_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Radio.internal_static_RadioProtocolCommand_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Radio.RadioProtocolCommand.class, Radio.RadioProtocolCommand.Builder.class);
      }

      // Construct using Radio.RadioProtocolCommand.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        robotId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        velocityX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        velocityY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        velocityR_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        flatKick_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        chipKick_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        dribblerSpin_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        distance_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Radio.internal_static_RadioProtocolCommand_descriptor;
      }

      public Radio.RadioProtocolCommand getDefaultInstanceForType() {
        return Radio.RadioProtocolCommand.getDefaultInstance();
      }

      public Radio.RadioProtocolCommand build() {
        Radio.RadioProtocolCommand result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Radio.RadioProtocolCommand buildPartial() {
        Radio.RadioProtocolCommand result = new Radio.RadioProtocolCommand(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.robotId_ = robotId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.velocityX_ = velocityX_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.velocityY_ = velocityY_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.velocityR_ = velocityR_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.flatKick_ = flatKick_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.chipKick_ = chipKick_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.dribblerSpin_ = dribblerSpin_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.distance_ = distance_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Radio.RadioProtocolCommand) {
          return mergeFrom((Radio.RadioProtocolCommand)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Radio.RadioProtocolCommand other) {
        if (other == Radio.RadioProtocolCommand.getDefaultInstance()) return this;
        if (other.hasRobotId()) {
          setRobotId(other.getRobotId());
        }
        if (other.hasVelocityX()) {
          setVelocityX(other.getVelocityX());
        }
        if (other.hasVelocityY()) {
          setVelocityY(other.getVelocityY());
        }
        if (other.hasVelocityR()) {
          setVelocityR(other.getVelocityR());
        }
        if (other.hasFlatKick()) {
          setFlatKick(other.getFlatKick());
        }
        if (other.hasChipKick()) {
          setChipKick(other.getChipKick());
        }
        if (other.hasDribblerSpin()) {
          setDribblerSpin(other.getDribblerSpin());
        }
        if (other.hasDistance()) {
          setDistance(other.getDistance());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRobotId()) {
          
          return false;
        }
        if (!hasVelocityX()) {
          
          return false;
        }
        if (!hasVelocityY()) {
          
          return false;
        }
        if (!hasVelocityR()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Radio.RadioProtocolCommand parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Radio.RadioProtocolCommand) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int robotId_ ;
      /**
       * <code>required int32 robot_id = 1;</code>
       *
       * <pre>
       * The unique ID of the robot, as identified by SSL-Vision.
       * </pre>
       */
      public boolean hasRobotId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 robot_id = 1;</code>
       *
       * <pre>
       * The unique ID of the robot, as identified by SSL-Vision.
       * </pre>
       */
      public int getRobotId() {
        return robotId_;
      }
      /**
       * <code>required int32 robot_id = 1;</code>
       *
       * <pre>
       * The unique ID of the robot, as identified by SSL-Vision.
       * </pre>
       */
      public Builder setRobotId(int value) {
        bitField0_ |= 0x00000001;
        robotId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 robot_id = 1;</code>
       *
       * <pre>
       * The unique ID of the robot, as identified by SSL-Vision.
       * </pre>
       */
      public Builder clearRobotId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        robotId_ = 0;
        onChanged();
        return this;
      }

      private float velocityX_ ;
      /**
       * <code>required float velocity_x = 2;</code>
       *
       * <pre>
       * Desired forward drive velocity in meters / second.
       * </pre>
       */
      public boolean hasVelocityX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float velocity_x = 2;</code>
       *
       * <pre>
       * Desired forward drive velocity in meters / second.
       * </pre>
       */
      public float getVelocityX() {
        return velocityX_;
      }
      /**
       * <code>required float velocity_x = 2;</code>
       *
       * <pre>
       * Desired forward drive velocity in meters / second.
       * </pre>
       */
      public Builder setVelocityX(float value) {
        bitField0_ |= 0x00000002;
        velocityX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float velocity_x = 2;</code>
       *
       * <pre>
       * Desired forward drive velocity in meters / second.
       * </pre>
       */
      public Builder clearVelocityX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        velocityX_ = 0F;
        onChanged();
        return this;
      }

      private float velocityY_ ;
      /**
       * <code>required float velocity_y = 3;</code>
       *
       * <pre>
       * Desired sideways left drive velocity in meters / second.
       * </pre>
       */
      public boolean hasVelocityY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required float velocity_y = 3;</code>
       *
       * <pre>
       * Desired sideways left drive velocity in meters / second.
       * </pre>
       */
      public float getVelocityY() {
        return velocityY_;
      }
      /**
       * <code>required float velocity_y = 3;</code>
       *
       * <pre>
       * Desired sideways left drive velocity in meters / second.
       * </pre>
       */
      public Builder setVelocityY(float value) {
        bitField0_ |= 0x00000004;
        velocityY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float velocity_y = 3;</code>
       *
       * <pre>
       * Desired sideways left drive velocity in meters / second.
       * </pre>
       */
      public Builder clearVelocityY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        velocityY_ = 0F;
        onChanged();
        return this;
      }

      private float velocityR_ ;
      /**
       * <code>required float velocity_r = 4;</code>
       *
       * <pre>
       * Desired counter-clockwise angular velocity in radians / second.
       * </pre>
       */
      public boolean hasVelocityR() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required float velocity_r = 4;</code>
       *
       * <pre>
       * Desired counter-clockwise angular velocity in radians / second.
       * </pre>
       */
      public float getVelocityR() {
        return velocityR_;
      }
      /**
       * <code>required float velocity_r = 4;</code>
       *
       * <pre>
       * Desired counter-clockwise angular velocity in radians / second.
       * </pre>
       */
      public Builder setVelocityR(float value) {
        bitField0_ |= 0x00000008;
        velocityR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float velocity_r = 4;</code>
       *
       * <pre>
       * Desired counter-clockwise angular velocity in radians / second.
       * </pre>
       */
      public Builder clearVelocityR() {
        bitField0_ = (bitField0_ & ~0x00000008);
        velocityR_ = 0F;
        onChanged();
        return this;
      }

      private float flatKick_ ;
      /**
       * <code>optional float flat_kick = 5;</code>
       *
       * <pre>
       * Desired flat kick speed, in meters / second.
       * If this optional field is missing, then no flat kick command should be
       * sent.
       * </pre>
       */
      public boolean hasFlatKick() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float flat_kick = 5;</code>
       *
       * <pre>
       * Desired flat kick speed, in meters / second.
       * If this optional field is missing, then no flat kick command should be
       * sent.
       * </pre>
       */
      public float getFlatKick() {
        return flatKick_;
      }
      /**
       * <code>optional float flat_kick = 5;</code>
       *
       * <pre>
       * Desired flat kick speed, in meters / second.
       * If this optional field is missing, then no flat kick command should be
       * sent.
       * </pre>
       */
      public Builder setFlatKick(float value) {
        bitField0_ |= 0x00000010;
        flatKick_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float flat_kick = 5;</code>
       *
       * <pre>
       * Desired flat kick speed, in meters / second.
       * If this optional field is missing, then no flat kick command should be
       * sent.
       * </pre>
       */
      public Builder clearFlatKick() {
        bitField0_ = (bitField0_ & ~0x00000010);
        flatKick_ = 0F;
        onChanged();
        return this;
      }

      private float chipKick_ ;
      /**
       * <code>optional float chip_kick = 6;</code>
       *
       * <pre>
       * Desired chip kick distance, in meters.
       * If this optional field is missing, then no flat kick command should be
       * sent. If this field is present along with the flat_kick field, the
       * flat_kick command takes precedence.
       * </pre>
       */
      public boolean hasChipKick() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float chip_kick = 6;</code>
       *
       * <pre>
       * Desired chip kick distance, in meters.
       * If this optional field is missing, then no flat kick command should be
       * sent. If this field is present along with the flat_kick field, the
       * flat_kick command takes precedence.
       * </pre>
       */
      public float getChipKick() {
        return chipKick_;
      }
      /**
       * <code>optional float chip_kick = 6;</code>
       *
       * <pre>
       * Desired chip kick distance, in meters.
       * If this optional field is missing, then no flat kick command should be
       * sent. If this field is present along with the flat_kick field, the
       * flat_kick command takes precedence.
       * </pre>
       */
      public Builder setChipKick(float value) {
        bitField0_ |= 0x00000020;
        chipKick_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float chip_kick = 6;</code>
       *
       * <pre>
       * Desired chip kick distance, in meters.
       * If this optional field is missing, then no flat kick command should be
       * sent. If this field is present along with the flat_kick field, the
       * flat_kick command takes precedence.
       * </pre>
       */
      public Builder clearChipKick() {
        bitField0_ = (bitField0_ & ~0x00000020);
        chipKick_ = 0F;
        onChanged();
        return this;
      }

      private float dribblerSpin_ ;
      /**
       * <code>optional float dribbler_spin = 7;</code>
       *
       * <pre>
       * Desired dribbler spin, from -1 to +1, where -1 is the maximum reverse-spin
       * that can be imparted to the ball, and +1 is the maximum forward-spin
       * that can be imparted to the ball.
       * </pre>
       */
      public boolean hasDribblerSpin() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float dribbler_spin = 7;</code>
       *
       * <pre>
       * Desired dribbler spin, from -1 to +1, where -1 is the maximum reverse-spin
       * that can be imparted to the ball, and +1 is the maximum forward-spin
       * that can be imparted to the ball.
       * </pre>
       */
      public float getDribblerSpin() {
        return dribblerSpin_;
      }
      /**
       * <code>optional float dribbler_spin = 7;</code>
       *
       * <pre>
       * Desired dribbler spin, from -1 to +1, where -1 is the maximum reverse-spin
       * that can be imparted to the ball, and +1 is the maximum forward-spin
       * that can be imparted to the ball.
       * </pre>
       */
      public Builder setDribblerSpin(float value) {
        bitField0_ |= 0x00000040;
        dribblerSpin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float dribbler_spin = 7;</code>
       *
       * <pre>
       * Desired dribbler spin, from -1 to +1, where -1 is the maximum reverse-spin
       * that can be imparted to the ball, and +1 is the maximum forward-spin
       * that can be imparted to the ball.
       * </pre>
       */
      public Builder clearDribblerSpin() {
        bitField0_ = (bitField0_ & ~0x00000040);
        dribblerSpin_ = 0F;
        onChanged();
        return this;
      }

      private int distance_ ;
      /**
       * <code>optional int32 distance = 8;</code>
       *
       * <pre>
       * remaining distance to destination in mm
       * </pre>
       */
      public boolean hasDistance() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 distance = 8;</code>
       *
       * <pre>
       * remaining distance to destination in mm
       * </pre>
       */
      public int getDistance() {
        return distance_;
      }
      /**
       * <code>optional int32 distance = 8;</code>
       *
       * <pre>
       * remaining distance to destination in mm
       * </pre>
       */
      public Builder setDistance(int value) {
        bitField0_ |= 0x00000080;
        distance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 distance = 8;</code>
       *
       * <pre>
       * remaining distance to destination in mm
       * </pre>
       */
      public Builder clearDistance() {
        bitField0_ = (bitField0_ & ~0x00000080);
        distance_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:RadioProtocolCommand)
    }

    static {
      defaultInstance = new RadioProtocolCommand(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:RadioProtocolCommand)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_RadioProtocolWrapper_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_RadioProtocolWrapper_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_RadioProtocolCommand_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_RadioProtocolCommand_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013Radio.proto\">\n\024RadioProtocolWrapper\022&\n" +
      "\007command\030\001 \003(\0132\025.RadioProtocolCommand\"\263\001" +
      "\n\024RadioProtocolCommand\022\020\n\010robot_id\030\001 \002(\005" +
      "\022\022\n\nvelocity_x\030\002 \002(\002\022\022\n\nvelocity_y\030\003 \002(\002" +
      "\022\022\n\nvelocity_r\030\004 \002(\002\022\021\n\tflat_kick\030\005 \001(\002\022" +
      "\021\n\tchip_kick\030\006 \001(\002\022\025\n\rdribbler_spin\030\007 \001(" +
      "\002\022\020\n\010distance\030\010 \001(\005"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_RadioProtocolWrapper_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_RadioProtocolWrapper_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_RadioProtocolWrapper_descriptor,
        new java.lang.String[] { "Command", });
    internal_static_RadioProtocolCommand_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_RadioProtocolCommand_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_RadioProtocolCommand_descriptor,
        new java.lang.String[] { "RobotId", "VelocityX", "VelocityY", "VelocityR", "FlatKick", "ChipKick", "DribblerSpin", "Distance", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
