package org.ssh.expressions.tokens;

import org.ssh.expressions.Token;

import java.util.List;
import java.util.function.BiFunction;

/**
 * The Class OperatorToken.
 *
 *
 * @param <O> The Type of object encompassed by the Token.
 * @author Rimon Oz
 */
public class OperatorToken<O> extends Token<O> {
    /**
     * The function (or meaning) of the operator which takes
     * two objects and returns a list of results.
     */
    private BiFunction<O, O, List<O>> operatorFunction;
    /**
     * Whether the operator is left associative or right associative.
     */
    private boolean direction;
    /**
     * The precedence-level of the operator.
     */
    private int precedence;

    /**
     * Constructs a new OperatorToken.
     * @param operatorToken     The String representation of the operator.
     * @param direction         True if right-associative, false otherwise.
     * @param precedence        The precedence level of the operator.
     * @param transferFunction  The function which the operator represents.
     */
    public OperatorToken(String operatorToken, boolean direction, int precedence, BiFunction<O, O, List<O>> transferFunction) {
        super("o", operatorToken);
        this.operatorFunction = transferFunction;
        this.precedence = precedence;
        this.direction = direction;
    }

    /**
     * Applies the operator's function to the supplied arguments.
     * @param leftMember    The token to the left of the operator (in infix notation.
     * @param rightMember   The token to the right of the operator (in infix notation).
     * @return              The list of results generated by applying the operator to the supplied arguments.
     */
    public List<O> apply(O leftMember, O rightMember) {
        return this.direction
                ? this.operatorFunction.apply(leftMember, rightMember)
                : this.operatorFunction.apply(rightMember, leftMember);
    }

    public boolean getDirection() {
        return this.direction;
    }

    public int getPrecedence() {
        return this.precedence;
    }
}
