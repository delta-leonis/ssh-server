package org.ssh.expressions.languages;

import org.ssh.expressions.RegularLanguage;
import org.ssh.pipelines.PipelinePacket;
import org.ssh.services.service.Coupler;

import java.util.*;
import java.util.function.Function;

/**
 * The Class Meme.
 * <p>
 * MEME: Evaluates Manageable Expressions
 * <p>
 * Meme is a regular language whose words are Strings.
 * Meme is a purpose-specific language made for looking up objects in a ConcurrentHashMap by their key (the symbolic
 * token) and resolving to their values (the associated meaning).
 *
 * @author Rimon Oz
 */
public class Pepe {

    /**
     * The internal representation of the language.
     */
    private RegularLanguage<Function<PipelinePacket<?>, PipelinePacket<?>>> regularLanguage;

    /**
     * Instantiates a new Pepe.
     */
    public Pepe(Function<String, Function<PipelinePacket<?>, PipelinePacket<?>>> resolvingOperation) {

        // create the language with the following lookup function
        this.regularLanguage = new RegularLanguage<>(resolvingOperation)
        // add the concatenation operator
        .addConcatenator(">",
                (leftMember, rightMember) -> {
                    return new ArrayList<>(Collections.singletonList(input -> rightMember.apply(leftMember.apply(input))));
                })
        // add the parallel operator
        .addOperator("|", true, 2,
                (leftMember, rightMember) -> new ArrayList<>(Arrays.asList(leftMember::apply, rightMember::apply)))
        // build the language
        .build();
    }

    /**
     * Evaluates the given pattern and returns a list of all possible pipeline routes generated by the pattern.
     *
     * @param pattern The pattern to be evaluated.
     * @return A list of routes generated by the evaluation.
     */
    public List<Function<PipelinePacket<?>, PipelinePacket<?>>> evaluate(String pattern) {
        return this.regularLanguage.evaluate(pattern);
    }

}