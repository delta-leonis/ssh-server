package nl.saxion.robosim.model.protobuf;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_referee.proto

public final class SslReferee {
  private SslReferee() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface SSL_RefereeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SSL_Referee)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint64 packet_timestamp = 1;</code>
     *
     * <pre>
     * The UNIX timestamp when the packet was sent, in microseconds.
     * Divide by 1,000,000 to get a time_t.
     * </pre>
     */
    boolean hasPacketTimestamp();
    /**
     * <code>required uint64 packet_timestamp = 1;</code>
     *
     * <pre>
     * The UNIX timestamp when the packet was sent, in microseconds.
     * Divide by 1,000,000 to get a time_t.
     * </pre>
     */
    long getPacketTimestamp();

    /**
     * <code>required .SSL_Referee.Stage stage = 2;</code>
     */
    boolean hasStage();
    /**
     * <code>required .SSL_Referee.Stage stage = 2;</code>
     */
    SSL_Referee.Stage getStage();

    /**
     * <code>optional sint32 stage_time_left = 3;</code>
     *
     * <pre>
     * The number of microseconds left in the stage.
     * The following stages have this value; the rest do not:
     * NORMAL_FIRST_HALF
     * NORMAL_HALF_TIME
     * NORMAL_SECOND_HALF
     * EXTRA_TIME_BREAK
     * EXTRA_FIRST_HALF
     * EXTRA_HALF_TIME
     * EXTRA_SECOND_HALF
     * PENALTY_SHOOTOUT_BREAK
     * If the stage runs over its specified time, this value
     * becomes negative.
     * </pre>
     */
    boolean hasStageTimeLeft();
    /**
     * <code>optional sint32 stage_time_left = 3;</code>
     *
     * <pre>
     * The number of microseconds left in the stage.
     * The following stages have this value; the rest do not:
     * NORMAL_FIRST_HALF
     * NORMAL_HALF_TIME
     * NORMAL_SECOND_HALF
     * EXTRA_TIME_BREAK
     * EXTRA_FIRST_HALF
     * EXTRA_HALF_TIME
     * EXTRA_SECOND_HALF
     * PENALTY_SHOOTOUT_BREAK
     * If the stage runs over its specified time, this value
     * becomes negative.
     * </pre>
     */
    int getStageTimeLeft();

    /**
     * <code>required .SSL_Referee.Command command = 4;</code>
     */
    boolean hasCommand();
    /**
     * <code>required .SSL_Referee.Command command = 4;</code>
     */
    SSL_Referee.Command getCommand();

    /**
     * <code>required uint32 command_counter = 5;</code>
     *
     * <pre>
     * The number of commands issued since startup (mod 2^32).
     * </pre>
     */
    boolean hasCommandCounter();
    /**
     * <code>required uint32 command_counter = 5;</code>
     *
     * <pre>
     * The number of commands issued since startup (mod 2^32).
     * </pre>
     */
    int getCommandCounter();

    /**
     * <code>required uint64 command_timestamp = 6;</code>
     *
     * <pre>
     * The UNIX timestamp when the command was issued, in microseconds.
     * This value changes only when a new command is issued, not on each packet.
     * </pre>
     */
    boolean hasCommandTimestamp();
    /**
     * <code>required uint64 command_timestamp = 6;</code>
     *
     * <pre>
     * The UNIX timestamp when the command was issued, in microseconds.
     * This value changes only when a new command is issued, not on each packet.
     * </pre>
     */
    long getCommandTimestamp();

    /**
     * <code>required .SSL_Referee.TeamInfo yellow = 7;</code>
     *
     * <pre>
     * Information about the two teams.
     * </pre>
     */
    boolean hasYellow();
    /**
     * <code>required .SSL_Referee.TeamInfo yellow = 7;</code>
     *
     * <pre>
     * Information about the two teams.
     * </pre>
     */
    SSL_Referee.TeamInfo getYellow();
    /**
     * <code>required .SSL_Referee.TeamInfo yellow = 7;</code>
     *
     * <pre>
     * Information about the two teams.
     * </pre>
     */
    SSL_Referee.TeamInfoOrBuilder getYellowOrBuilder();

    /**
     * <code>required .SSL_Referee.TeamInfo blue = 8;</code>
     */
    boolean hasBlue();
    /**
     * <code>required .SSL_Referee.TeamInfo blue = 8;</code>
     */
    SSL_Referee.TeamInfo getBlue();
    /**
     * <code>required .SSL_Referee.TeamInfo blue = 8;</code>
     */
    SSL_Referee.TeamInfoOrBuilder getBlueOrBuilder();
  }
  /**
   * Protobuf type {@code SSL_Referee}
   *
   * <pre>
   * Each UDP packet contains one of these messages.
   * </pre>
   */
  public static final class SSL_Referee extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:SSL_Referee)
      SSL_RefereeOrBuilder {
    // Use SSL_Referee.newBuilder() to construct.
    private SSL_Referee(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SSL_Referee(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SSL_Referee defaultInstance;
    public static SSL_Referee getDefaultInstance() {
      return defaultInstance;
    }

    public SSL_Referee getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SSL_Referee(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              packetTimestamp_ = input.readUInt64();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              Stage value = Stage.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                stage_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              stageTimeLeft_ = input.readSInt32();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              Command value = Command.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                command_ = value;
              }
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              commandCounter_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              commandTimestamp_ = input.readUInt64();
              break;
            }
            case 58: {
              TeamInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = yellow_.toBuilder();
              }
              yellow_ = input.readMessage(TeamInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(yellow_);
                yellow_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              TeamInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = blue_.toBuilder();
              }
              blue_ = input.readMessage(TeamInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(blue_);
                blue_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SslReferee.internal_static_SSL_Referee_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SslReferee.internal_static_SSL_Referee_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SSL_Referee.class, Builder.class);
    }

    public static com.google.protobuf.Parser<SSL_Referee> PARSER =
        new com.google.protobuf.AbstractParser<SSL_Referee>() {
      public SSL_Referee parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SSL_Referee(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<SSL_Referee> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code SSL_Referee.Stage}
     *
     * <pre>
     * These are the "coarse" stages of the game.
     * </pre>
     */
    public enum Stage
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NORMAL_FIRST_HALF_PRE = 0;</code>
       *
       * <pre>
       * The first half is about to start.
       * A kickoff is called within this stage.
       * This stage ends with the NORMAL_START.
       * </pre>
       */
      NORMAL_FIRST_HALF_PRE(0, 0),
      /**
       * <code>NORMAL_FIRST_HALF = 1;</code>
       *
       * <pre>
       * The first half of the normal game, before half time.
       * </pre>
       */
      NORMAL_FIRST_HALF(1, 1),
      /**
       * <code>NORMAL_HALF_TIME = 2;</code>
       *
       * <pre>
       * Half time between first and second halves.
       * </pre>
       */
      NORMAL_HALF_TIME(2, 2),
      /**
       * <code>NORMAL_SECOND_HALF_PRE = 3;</code>
       *
       * <pre>
       * The second half is about to start.
       * A kickoff is called within this stage.
       * This stage ends with the NORMAL_START.
       * </pre>
       */
      NORMAL_SECOND_HALF_PRE(3, 3),
      /**
       * <code>NORMAL_SECOND_HALF = 4;</code>
       *
       * <pre>
       * The second half of the normal game, after half time.
       * </pre>
       */
      NORMAL_SECOND_HALF(4, 4),
      /**
       * <code>EXTRA_TIME_BREAK = 5;</code>
       *
       * <pre>
       * The break before extra time.
       * </pre>
       */
      EXTRA_TIME_BREAK(5, 5),
      /**
       * <code>EXTRA_FIRST_HALF_PRE = 6;</code>
       *
       * <pre>
       * The first half of extra time is about to start.
       * A kickoff is called within this stage.
       * This stage ends with the NORMAL_START.
       * </pre>
       */
      EXTRA_FIRST_HALF_PRE(6, 6),
      /**
       * <code>EXTRA_FIRST_HALF = 7;</code>
       *
       * <pre>
       * The first half of extra time.
       * </pre>
       */
      EXTRA_FIRST_HALF(7, 7),
      /**
       * <code>EXTRA_HALF_TIME = 8;</code>
       *
       * <pre>
       * Half time between first and second extra halves.
       * </pre>
       */
      EXTRA_HALF_TIME(8, 8),
      /**
       * <code>EXTRA_SECOND_HALF_PRE = 9;</code>
       *
       * <pre>
       * The second half of extra time is about to start.
       * A kickoff is called within this stage.
       * This stage ends with the NORMAL_START.
       * </pre>
       */
      EXTRA_SECOND_HALF_PRE(9, 9),
      /**
       * <code>EXTRA_SECOND_HALF = 10;</code>
       *
       * <pre>
       * The second half of extra time.
       * </pre>
       */
      EXTRA_SECOND_HALF(10, 10),
      /**
       * <code>PENALTY_SHOOTOUT_BREAK = 11;</code>
       *
       * <pre>
       * The break before penalty shootout.
       * </pre>
       */
      PENALTY_SHOOTOUT_BREAK(11, 11),
      /**
       * <code>PENALTY_SHOOTOUT = 12;</code>
       *
       * <pre>
       * The penalty shootout.
       * </pre>
       */
      PENALTY_SHOOTOUT(12, 12),
      /**
       * <code>POST_GAME = 13;</code>
       *
       * <pre>
       * The game is over.
       * </pre>
       */
      POST_GAME(13, 13),
      ;

      /**
       * <code>NORMAL_FIRST_HALF_PRE = 0;</code>
       *
       * <pre>
       * The first half is about to start.
       * A kickoff is called within this stage.
       * This stage ends with the NORMAL_START.
       * </pre>
       */
      public static final int NORMAL_FIRST_HALF_PRE_VALUE = 0;
      /**
       * <code>NORMAL_FIRST_HALF = 1;</code>
       *
       * <pre>
       * The first half of the normal game, before half time.
       * </pre>
       */
      public static final int NORMAL_FIRST_HALF_VALUE = 1;
      /**
       * <code>NORMAL_HALF_TIME = 2;</code>
       *
       * <pre>
       * Half time between first and second halves.
       * </pre>
       */
      public static final int NORMAL_HALF_TIME_VALUE = 2;
      /**
       * <code>NORMAL_SECOND_HALF_PRE = 3;</code>
       *
       * <pre>
       * The second half is about to start.
       * A kickoff is called within this stage.
       * This stage ends with the NORMAL_START.
       * </pre>
       */
      public static final int NORMAL_SECOND_HALF_PRE_VALUE = 3;
      /**
       * <code>NORMAL_SECOND_HALF = 4;</code>
       *
       * <pre>
       * The second half of the normal game, after half time.
       * </pre>
       */
      public static final int NORMAL_SECOND_HALF_VALUE = 4;
      /**
       * <code>EXTRA_TIME_BREAK = 5;</code>
       *
       * <pre>
       * The break before extra time.
       * </pre>
       */
      public static final int EXTRA_TIME_BREAK_VALUE = 5;
      /**
       * <code>EXTRA_FIRST_HALF_PRE = 6;</code>
       *
       * <pre>
       * The first half of extra time is about to start.
       * A kickoff is called within this stage.
       * This stage ends with the NORMAL_START.
       * </pre>
       */
      public static final int EXTRA_FIRST_HALF_PRE_VALUE = 6;
      /**
       * <code>EXTRA_FIRST_HALF = 7;</code>
       *
       * <pre>
       * The first half of extra time.
       * </pre>
       */
      public static final int EXTRA_FIRST_HALF_VALUE = 7;
      /**
       * <code>EXTRA_HALF_TIME = 8;</code>
       *
       * <pre>
       * Half time between first and second extra halves.
       * </pre>
       */
      public static final int EXTRA_HALF_TIME_VALUE = 8;
      /**
       * <code>EXTRA_SECOND_HALF_PRE = 9;</code>
       *
       * <pre>
       * The second half of extra time is about to start.
       * A kickoff is called within this stage.
       * This stage ends with the NORMAL_START.
       * </pre>
       */
      public static final int EXTRA_SECOND_HALF_PRE_VALUE = 9;
      /**
       * <code>EXTRA_SECOND_HALF = 10;</code>
       *
       * <pre>
       * The second half of extra time.
       * </pre>
       */
      public static final int EXTRA_SECOND_HALF_VALUE = 10;
      /**
       * <code>PENALTY_SHOOTOUT_BREAK = 11;</code>
       *
       * <pre>
       * The break before penalty shootout.
       * </pre>
       */
      public static final int PENALTY_SHOOTOUT_BREAK_VALUE = 11;
      /**
       * <code>PENALTY_SHOOTOUT = 12;</code>
       *
       * <pre>
       * The penalty shootout.
       * </pre>
       */
      public static final int PENALTY_SHOOTOUT_VALUE = 12;
      /**
       * <code>POST_GAME = 13;</code>
       *
       * <pre>
       * The game is over.
       * </pre>
       */
      public static final int POST_GAME_VALUE = 13;


      public final int getNumber() { return value; }

      public static Stage valueOf(int value) {
        switch (value) {
          case 0: return NORMAL_FIRST_HALF_PRE;
          case 1: return NORMAL_FIRST_HALF;
          case 2: return NORMAL_HALF_TIME;
          case 3: return NORMAL_SECOND_HALF_PRE;
          case 4: return NORMAL_SECOND_HALF;
          case 5: return EXTRA_TIME_BREAK;
          case 6: return EXTRA_FIRST_HALF_PRE;
          case 7: return EXTRA_FIRST_HALF;
          case 8: return EXTRA_HALF_TIME;
          case 9: return EXTRA_SECOND_HALF_PRE;
          case 10: return EXTRA_SECOND_HALF;
          case 11: return PENALTY_SHOOTOUT_BREAK;
          case 12: return PENALTY_SHOOTOUT;
          case 13: return POST_GAME;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Stage>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Stage>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Stage>() {
              public Stage findValueByNumber(int number) {
                return Stage.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return SSL_Referee.getDescriptor().getEnumTypes().get(0);
      }

      private static final Stage[] VALUES = values();

      public static Stage valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      Stage(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:SSL_Referee.Stage)
    }

    /**
     * Protobuf enum {@code SSL_Referee.Command}
     *
     * <pre>
     * These are the "fine" states of play on the field.
     * </pre>
     */
    public enum Command
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>HALT = 0;</code>
       *
       * <pre>
       * All robots should completely stop moving.
       * </pre>
       */
      HALT(0, 0),
      /**
       * <code>STOP = 1;</code>
       *
       * <pre>
       * Robots must keep 50 cm from the ball.
       * </pre>
       */
      STOP(1, 1),
      /**
       * <code>NORMAL_START = 2;</code>
       *
       * <pre>
       * A prepared kickoff or penalty may now be taken.
       * </pre>
       */
      NORMAL_START(2, 2),
      /**
       * <code>FORCE_START = 3;</code>
       *
       * <pre>
       * The ball is dropped and free for either team.
       * </pre>
       */
      FORCE_START(3, 3),
      /**
       * <code>PREPARE_KICKOFF_YELLOW = 4;</code>
       *
       * <pre>
       * The yellow team may move into kickoff position.
       * </pre>
       */
      PREPARE_KICKOFF_YELLOW(4, 4),
      /**
       * <code>PREPARE_KICKOFF_BLUE = 5;</code>
       *
       * <pre>
       * The blue team may move into kickoff position.
       * </pre>
       */
      PREPARE_KICKOFF_BLUE(5, 5),
      /**
       * <code>PREPARE_PENALTY_YELLOW = 6;</code>
       *
       * <pre>
       * The yellow team may move into penalty position.
       * </pre>
       */
      PREPARE_PENALTY_YELLOW(6, 6),
      /**
       * <code>PREPARE_PENALTY_BLUE = 7;</code>
       *
       * <pre>
       * The blue team may move into penalty position.
       * </pre>
       */
      PREPARE_PENALTY_BLUE(7, 7),
      /**
       * <code>DIRECT_FREE_YELLOW = 8;</code>
       *
       * <pre>
       * The yellow team may take a direct free kick.
       * </pre>
       */
      DIRECT_FREE_YELLOW(8, 8),
      /**
       * <code>DIRECT_FREE_BLUE = 9;</code>
       *
       * <pre>
       * The blue team may take a direct free kick.
       * </pre>
       */
      DIRECT_FREE_BLUE(9, 9),
      /**
       * <code>INDIRECT_FREE_YELLOW = 10;</code>
       *
       * <pre>
       * The yellow team may take an indirect free kick.
       * </pre>
       */
      INDIRECT_FREE_YELLOW(10, 10),
      /**
       * <code>INDIRECT_FREE_BLUE = 11;</code>
       *
       * <pre>
       * The blue team may take an indirect free kick.
       * </pre>
       */
      INDIRECT_FREE_BLUE(11, 11),
      /**
       * <code>TIMEOUT_YELLOW = 12;</code>
       *
       * <pre>
       * The yellow team is currently in a timeout.
       * </pre>
       */
      TIMEOUT_YELLOW(12, 12),
      /**
       * <code>TIMEOUT_BLUE = 13;</code>
       *
       * <pre>
       * The blue team is currently in a timeout.
       * </pre>
       */
      TIMEOUT_BLUE(13, 13),
      /**
       * <code>GOAL_YELLOW = 14;</code>
       *
       * <pre>
       * The yellow team just scored a goal.
       * For information only.
       * For rules compliance, teams must treat as STOP.
       * </pre>
       */
      GOAL_YELLOW(14, 14),
      /**
       * <code>GOAL_BLUE = 15;</code>
       *
       * <pre>
       * The blue team just scored a goal.
       * </pre>
       */
      GOAL_BLUE(15, 15),
      ;

      /**
       * <code>HALT = 0;</code>
       *
       * <pre>
       * All robots should completely stop moving.
       * </pre>
       */
      public static final int HALT_VALUE = 0;
      /**
       * <code>STOP = 1;</code>
       *
       * <pre>
       * Robots must keep 50 cm from the ball.
       * </pre>
       */
      public static final int STOP_VALUE = 1;
      /**
       * <code>NORMAL_START = 2;</code>
       *
       * <pre>
       * A prepared kickoff or penalty may now be taken.
       * </pre>
       */
      public static final int NORMAL_START_VALUE = 2;
      /**
       * <code>FORCE_START = 3;</code>
       *
       * <pre>
       * The ball is dropped and free for either team.
       * </pre>
       */
      public static final int FORCE_START_VALUE = 3;
      /**
       * <code>PREPARE_KICKOFF_YELLOW = 4;</code>
       *
       * <pre>
       * The yellow team may move into kickoff position.
       * </pre>
       */
      public static final int PREPARE_KICKOFF_YELLOW_VALUE = 4;
      /**
       * <code>PREPARE_KICKOFF_BLUE = 5;</code>
       *
       * <pre>
       * The blue team may move into kickoff position.
       * </pre>
       */
      public static final int PREPARE_KICKOFF_BLUE_VALUE = 5;
      /**
       * <code>PREPARE_PENALTY_YELLOW = 6;</code>
       *
       * <pre>
       * The yellow team may move into penalty position.
       * </pre>
       */
      public static final int PREPARE_PENALTY_YELLOW_VALUE = 6;
      /**
       * <code>PREPARE_PENALTY_BLUE = 7;</code>
       *
       * <pre>
       * The blue team may move into penalty position.
       * </pre>
       */
      public static final int PREPARE_PENALTY_BLUE_VALUE = 7;
      /**
       * <code>DIRECT_FREE_YELLOW = 8;</code>
       *
       * <pre>
       * The yellow team may take a direct free kick.
       * </pre>
       */
      public static final int DIRECT_FREE_YELLOW_VALUE = 8;
      /**
       * <code>DIRECT_FREE_BLUE = 9;</code>
       *
       * <pre>
       * The blue team may take a direct free kick.
       * </pre>
       */
      public static final int DIRECT_FREE_BLUE_VALUE = 9;
      /**
       * <code>INDIRECT_FREE_YELLOW = 10;</code>
       *
       * <pre>
       * The yellow team may take an indirect free kick.
       * </pre>
       */
      public static final int INDIRECT_FREE_YELLOW_VALUE = 10;
      /**
       * <code>INDIRECT_FREE_BLUE = 11;</code>
       *
       * <pre>
       * The blue team may take an indirect free kick.
       * </pre>
       */
      public static final int INDIRECT_FREE_BLUE_VALUE = 11;
      /**
       * <code>TIMEOUT_YELLOW = 12;</code>
       *
       * <pre>
       * The yellow team is currently in a timeout.
       * </pre>
       */
      public static final int TIMEOUT_YELLOW_VALUE = 12;
      /**
       * <code>TIMEOUT_BLUE = 13;</code>
       *
       * <pre>
       * The blue team is currently in a timeout.
       * </pre>
       */
      public static final int TIMEOUT_BLUE_VALUE = 13;
      /**
       * <code>GOAL_YELLOW = 14;</code>
       *
       * <pre>
       * The yellow team just scored a goal.
       * For information only.
       * For rules compliance, teams must treat as STOP.
       * </pre>
       */
      public static final int GOAL_YELLOW_VALUE = 14;
      /**
       * <code>GOAL_BLUE = 15;</code>
       *
       * <pre>
       * The blue team just scored a goal.
       * </pre>
       */
      public static final int GOAL_BLUE_VALUE = 15;


      public final int getNumber() { return value; }

      public static Command valueOf(int value) {
        switch (value) {
          case 0: return HALT;
          case 1: return STOP;
          case 2: return NORMAL_START;
          case 3: return FORCE_START;
          case 4: return PREPARE_KICKOFF_YELLOW;
          case 5: return PREPARE_KICKOFF_BLUE;
          case 6: return PREPARE_PENALTY_YELLOW;
          case 7: return PREPARE_PENALTY_BLUE;
          case 8: return DIRECT_FREE_YELLOW;
          case 9: return DIRECT_FREE_BLUE;
          case 10: return INDIRECT_FREE_YELLOW;
          case 11: return INDIRECT_FREE_BLUE;
          case 12: return TIMEOUT_YELLOW;
          case 13: return TIMEOUT_BLUE;
          case 14: return GOAL_YELLOW;
          case 15: return GOAL_BLUE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Command>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Command>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Command>() {
              public Command findValueByNumber(int number) {
                return Command.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return SSL_Referee.getDescriptor().getEnumTypes().get(1);
      }

      private static final Command[] VALUES = values();

      public static Command valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      Command(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:SSL_Referee.Command)
    }

    public interface TeamInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:SSL_Referee.TeamInfo)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * The team's name (empty string if operator has not typed anything).
       * </pre>
       */
      boolean hasName();
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * The team's name (empty string if operator has not typed anything).
       * </pre>
       */
      String getName();
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * The team's name (empty string if operator has not typed anything).
       * </pre>
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <code>required uint32 score = 2;</code>
       *
       * <pre>
       * The number of goals scored by the team during normal play and overtime.
       * </pre>
       */
      boolean hasScore();
      /**
       * <code>required uint32 score = 2;</code>
       *
       * <pre>
       * The number of goals scored by the team during normal play and overtime.
       * </pre>
       */
      int getScore();

      /**
       * <code>required uint32 red_cards = 3;</code>
       *
       * <pre>
       * The number of red cards issued to the team since the beginning of the game.
       * </pre>
       */
      boolean hasRedCards();
      /**
       * <code>required uint32 red_cards = 3;</code>
       *
       * <pre>
       * The number of red cards issued to the team since the beginning of the game.
       * </pre>
       */
      int getRedCards();

      /**
       * <code>repeated uint32 yellow_card_times = 4 [packed = true];</code>
       *
       * <pre>
       * The amount of time (in microseconds) left on each yellow card issued to the team.
       * If no yellow cards are issued, this array has no elements.
       * Otherwise, times are ordered from smallest to largest.
       * </pre>
       */
      java.util.List<Integer> getYellowCardTimesList();
      /**
       * <code>repeated uint32 yellow_card_times = 4 [packed = true];</code>
       *
       * <pre>
       * The amount of time (in microseconds) left on each yellow card issued to the team.
       * If no yellow cards are issued, this array has no elements.
       * Otherwise, times are ordered from smallest to largest.
       * </pre>
       */
      int getYellowCardTimesCount();
      /**
       * <code>repeated uint32 yellow_card_times = 4 [packed = true];</code>
       *
       * <pre>
       * The amount of time (in microseconds) left on each yellow card issued to the team.
       * If no yellow cards are issued, this array has no elements.
       * Otherwise, times are ordered from smallest to largest.
       * </pre>
       */
      int getYellowCardTimes(int index);

      /**
       * <code>required uint32 yellow_cards = 5;</code>
       *
       * <pre>
       * The total number of yellow cards ever issued to the team.
       * </pre>
       */
      boolean hasYellowCards();
      /**
       * <code>required uint32 yellow_cards = 5;</code>
       *
       * <pre>
       * The total number of yellow cards ever issued to the team.
       * </pre>
       */
      int getYellowCards();

      /**
       * <code>required uint32 timeouts = 6;</code>
       *
       * <pre>
       * The number of timeouts this team can still call.
       * If in a timeout right now, that timeout is excluded.
       * </pre>
       */
      boolean hasTimeouts();
      /**
       * <code>required uint32 timeouts = 6;</code>
       *
       * <pre>
       * The number of timeouts this team can still call.
       * If in a timeout right now, that timeout is excluded.
       * </pre>
       */
      int getTimeouts();

      /**
       * <code>required uint32 timeout_time = 7;</code>
       *
       * <pre>
       * The number of microseconds of timeout this team can use.
       * </pre>
       */
      boolean hasTimeoutTime();
      /**
       * <code>required uint32 timeout_time = 7;</code>
       *
       * <pre>
       * The number of microseconds of timeout this team can use.
       * </pre>
       */
      int getTimeoutTime();

      /**
       * <code>required uint32 goalie = 8;</code>
       *
       * <pre>
       * The pattern number of this team's goalie.
       * </pre>
       */
      boolean hasGoalie();
      /**
       * <code>required uint32 goalie = 8;</code>
       *
       * <pre>
       * The pattern number of this team's goalie.
       * </pre>
       */
      int getGoalie();
    }
    /**
     * Protobuf type {@code SSL_Referee.TeamInfo}
     *
     * <pre>
     * Information about a single team.
     * </pre>
     */
    public static final class TeamInfo extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:SSL_Referee.TeamInfo)
        TeamInfoOrBuilder {
      // Use TeamInfo.newBuilder() to construct.
      private TeamInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private TeamInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final TeamInfo defaultInstance;
      public static TeamInfo getDefaultInstance() {
        return defaultInstance;
      }

      public TeamInfo getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private TeamInfo(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000001;
                name_ = bs;
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                score_ = input.readUInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                redCards_ = input.readUInt32();
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  yellowCardTimes_ = new java.util.ArrayList<Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                yellowCardTimes_.add(input.readUInt32());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  yellowCardTimes_ = new java.util.ArrayList<Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  yellowCardTimes_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 40: {
                bitField0_ |= 0x00000008;
                yellowCards_ = input.readUInt32();
                break;
              }
              case 48: {
                bitField0_ |= 0x00000010;
                timeouts_ = input.readUInt32();
                break;
              }
              case 56: {
                bitField0_ |= 0x00000020;
                timeoutTime_ = input.readUInt32();
                break;
              }
              case 64: {
                bitField0_ |= 0x00000040;
                goalie_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            yellowCardTimes_ = java.util.Collections.unmodifiableList(yellowCardTimes_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SslReferee.internal_static_SSL_Referee_TeamInfo_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SslReferee.internal_static_SSL_Referee_TeamInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                TeamInfo.class, Builder.class);
      }

      public static com.google.protobuf.Parser<TeamInfo> PARSER =
          new com.google.protobuf.AbstractParser<TeamInfo>() {
        public TeamInfo parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new TeamInfo(input, extensionRegistry);
        }
      };

      @Override
      public com.google.protobuf.Parser<TeamInfo> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      public static final int NAME_FIELD_NUMBER = 1;
      private Object name_;
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * The team's name (empty string if operator has not typed anything).
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * The team's name (empty string if operator has not typed anything).
       * </pre>
       */
      public String getName() {
        Object ref = name_;
        if (ref instanceof String) {
          return (String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        }
      }
      /**
       * <code>required string name = 1;</code>
       *
       * <pre>
       * The team's name (empty string if operator has not typed anything).
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SCORE_FIELD_NUMBER = 2;
      private int score_;
      /**
       * <code>required uint32 score = 2;</code>
       *
       * <pre>
       * The number of goals scored by the team during normal play and overtime.
       * </pre>
       */
      public boolean hasScore() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 score = 2;</code>
       *
       * <pre>
       * The number of goals scored by the team during normal play and overtime.
       * </pre>
       */
      public int getScore() {
        return score_;
      }

      public static final int RED_CARDS_FIELD_NUMBER = 3;
      private int redCards_;
      /**
       * <code>required uint32 red_cards = 3;</code>
       *
       * <pre>
       * The number of red cards issued to the team since the beginning of the game.
       * </pre>
       */
      public boolean hasRedCards() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 red_cards = 3;</code>
       *
       * <pre>
       * The number of red cards issued to the team since the beginning of the game.
       * </pre>
       */
      public int getRedCards() {
        return redCards_;
      }

      public static final int YELLOW_CARD_TIMES_FIELD_NUMBER = 4;
      private java.util.List<Integer> yellowCardTimes_;
      /**
       * <code>repeated uint32 yellow_card_times = 4 [packed = true];</code>
       *
       * <pre>
       * The amount of time (in microseconds) left on each yellow card issued to the team.
       * If no yellow cards are issued, this array has no elements.
       * Otherwise, times are ordered from smallest to largest.
       * </pre>
       */
      public java.util.List<Integer>
          getYellowCardTimesList() {
        return yellowCardTimes_;
      }
      /**
       * <code>repeated uint32 yellow_card_times = 4 [packed = true];</code>
       *
       * <pre>
       * The amount of time (in microseconds) left on each yellow card issued to the team.
       * If no yellow cards are issued, this array has no elements.
       * Otherwise, times are ordered from smallest to largest.
       * </pre>
       */
      public int getYellowCardTimesCount() {
        return yellowCardTimes_.size();
      }
      /**
       * <code>repeated uint32 yellow_card_times = 4 [packed = true];</code>
       *
       * <pre>
       * The amount of time (in microseconds) left on each yellow card issued to the team.
       * If no yellow cards are issued, this array has no elements.
       * Otherwise, times are ordered from smallest to largest.
       * </pre>
       */
      public int getYellowCardTimes(int index) {
        return yellowCardTimes_.get(index);
      }
      private int yellowCardTimesMemoizedSerializedSize = -1;

      public static final int YELLOW_CARDS_FIELD_NUMBER = 5;
      private int yellowCards_;
      /**
       * <code>required uint32 yellow_cards = 5;</code>
       *
       * <pre>
       * The total number of yellow cards ever issued to the team.
       * </pre>
       */
      public boolean hasYellowCards() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint32 yellow_cards = 5;</code>
       *
       * <pre>
       * The total number of yellow cards ever issued to the team.
       * </pre>
       */
      public int getYellowCards() {
        return yellowCards_;
      }

      public static final int TIMEOUTS_FIELD_NUMBER = 6;
      private int timeouts_;
      /**
       * <code>required uint32 timeouts = 6;</code>
       *
       * <pre>
       * The number of timeouts this team can still call.
       * If in a timeout right now, that timeout is excluded.
       * </pre>
       */
      public boolean hasTimeouts() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 timeouts = 6;</code>
       *
       * <pre>
       * The number of timeouts this team can still call.
       * If in a timeout right now, that timeout is excluded.
       * </pre>
       */
      public int getTimeouts() {
        return timeouts_;
      }

      public static final int TIMEOUT_TIME_FIELD_NUMBER = 7;
      private int timeoutTime_;
      /**
       * <code>required uint32 timeout_time = 7;</code>
       *
       * <pre>
       * The number of microseconds of timeout this team can use.
       * </pre>
       */
      public boolean hasTimeoutTime() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required uint32 timeout_time = 7;</code>
       *
       * <pre>
       * The number of microseconds of timeout this team can use.
       * </pre>
       */
      public int getTimeoutTime() {
        return timeoutTime_;
      }

      public static final int GOALIE_FIELD_NUMBER = 8;
      private int goalie_;
      /**
       * <code>required uint32 goalie = 8;</code>
       *
       * <pre>
       * The pattern number of this team's goalie.
       * </pre>
       */
      public boolean hasGoalie() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required uint32 goalie = 8;</code>
       *
       * <pre>
       * The pattern number of this team's goalie.
       * </pre>
       */
      public int getGoalie() {
        return goalie_;
      }

      private void initFields() {
        name_ = "";
        score_ = 0;
        redCards_ = 0;
        yellowCardTimes_ = java.util.Collections.emptyList();
        yellowCards_ = 0;
        timeouts_ = 0;
        timeoutTime_ = 0;
        goalie_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasName()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasScore()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasRedCards()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasYellowCards()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasTimeouts()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasTimeoutTime()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasGoalie()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getNameBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeUInt32(2, score_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeUInt32(3, redCards_);
        }
        if (getYellowCardTimesList().size() > 0) {
          output.writeRawVarint32(34);
          output.writeRawVarint32(yellowCardTimesMemoizedSerializedSize);
        }
        for (int i = 0; i < yellowCardTimes_.size(); i++) {
          output.writeUInt32NoTag(yellowCardTimes_.get(i));
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeUInt32(5, yellowCards_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeUInt32(6, timeouts_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeUInt32(7, timeoutTime_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          output.writeUInt32(8, goalie_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getNameBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, score_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, redCards_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < yellowCardTimes_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(yellowCardTimes_.get(i));
          }
          size += dataSize;
          if (!getYellowCardTimesList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          yellowCardTimesMemoizedSerializedSize = dataSize;
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(5, yellowCards_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(6, timeouts_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(7, timeoutTime_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(8, goalie_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @Override
      protected Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static TeamInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static TeamInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static TeamInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static TeamInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static TeamInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static TeamInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static TeamInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static TeamInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static TeamInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static TeamInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(TeamInfo prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @Override
      protected Builder newBuilderForType(
          BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code SSL_Referee.TeamInfo}
       *
       * <pre>
       * Information about a single team.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:SSL_Referee.TeamInfo)
          TeamInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return SslReferee.internal_static_SSL_Referee_TeamInfo_descriptor;
        }

        protected FieldAccessorTable
            internalGetFieldAccessorTable() {
          return SslReferee.internal_static_SSL_Referee_TeamInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  TeamInfo.class, Builder.class);
        }

        // Construct using SslReferee.SSL_Referee.TeamInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          name_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          score_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          redCards_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          yellowCardTimes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          yellowCards_ = 0;
          bitField0_ = (bitField0_ & ~0x00000010);
          timeouts_ = 0;
          bitField0_ = (bitField0_ & ~0x00000020);
          timeoutTime_ = 0;
          bitField0_ = (bitField0_ & ~0x00000040);
          goalie_ = 0;
          bitField0_ = (bitField0_ & ~0x00000080);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return SslReferee.internal_static_SSL_Referee_TeamInfo_descriptor;
        }

        public TeamInfo getDefaultInstanceForType() {
          return TeamInfo.getDefaultInstance();
        }

        public TeamInfo build() {
          TeamInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public TeamInfo buildPartial() {
          TeamInfo result = new TeamInfo(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.name_ = name_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.score_ = score_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.redCards_ = redCards_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            yellowCardTimes_ = java.util.Collections.unmodifiableList(yellowCardTimes_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.yellowCardTimes_ = yellowCardTimes_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000008;
          }
          result.yellowCards_ = yellowCards_;
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000010;
          }
          result.timeouts_ = timeouts_;
          if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
            to_bitField0_ |= 0x00000020;
          }
          result.timeoutTime_ = timeoutTime_;
          if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
            to_bitField0_ |= 0x00000040;
          }
          result.goalie_ = goalie_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof TeamInfo) {
            return mergeFrom((TeamInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(TeamInfo other) {
          if (other == TeamInfo.getDefaultInstance()) return this;
          if (other.hasName()) {
            bitField0_ |= 0x00000001;
            name_ = other.name_;
            onChanged();
          }
          if (other.hasScore()) {
            setScore(other.getScore());
          }
          if (other.hasRedCards()) {
            setRedCards(other.getRedCards());
          }
          if (!other.yellowCardTimes_.isEmpty()) {
            if (yellowCardTimes_.isEmpty()) {
              yellowCardTimes_ = other.yellowCardTimes_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureYellowCardTimesIsMutable();
              yellowCardTimes_.addAll(other.yellowCardTimes_);
            }
            onChanged();
          }
          if (other.hasYellowCards()) {
            setYellowCards(other.getYellowCards());
          }
          if (other.hasTimeouts()) {
            setTimeouts(other.getTimeouts());
          }
          if (other.hasTimeoutTime()) {
            setTimeoutTime(other.getTimeoutTime());
          }
          if (other.hasGoalie()) {
            setGoalie(other.getGoalie());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasName()) {
            
            return false;
          }
          if (!hasScore()) {
            
            return false;
          }
          if (!hasRedCards()) {
            
            return false;
          }
          if (!hasYellowCards()) {
            
            return false;
          }
          if (!hasTimeouts()) {
            
            return false;
          }
          if (!hasTimeoutTime()) {
            
            return false;
          }
          return hasGoalie();
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          TeamInfo parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (TeamInfo) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private Object name_ = "";
        /**
         * <code>required string name = 1;</code>
         *
         * <pre>
         * The team's name (empty string if operator has not typed anything).
         * </pre>
         */
        public boolean hasName() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required string name = 1;</code>
         *
         * <pre>
         * The team's name (empty string if operator has not typed anything).
         * </pre>
         */
        public String getName() {
          Object ref = name_;
          if (!(ref instanceof String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              name_ = s;
            }
            return s;
          } else {
            return (String) ref;
          }
        }
        /**
         * <code>required string name = 1;</code>
         *
         * <pre>
         * The team's name (empty string if operator has not typed anything).
         * </pre>
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>required string name = 1;</code>
         *
         * <pre>
         * The team's name (empty string if operator has not typed anything).
         * </pre>
         */
        public Builder setName(
            String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          name_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required string name = 1;</code>
         *
         * <pre>
         * The team's name (empty string if operator has not typed anything).
         * </pre>
         */
        public Builder clearName() {
          bitField0_ = (bitField0_ & ~0x00000001);
          name_ = getDefaultInstance().getName();
          onChanged();
          return this;
        }
        /**
         * <code>required string name = 1;</code>
         *
         * <pre>
         * The team's name (empty string if operator has not typed anything).
         * </pre>
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          name_ = value;
          onChanged();
          return this;
        }

        private int score_ ;
        /**
         * <code>required uint32 score = 2;</code>
         *
         * <pre>
         * The number of goals scored by the team during normal play and overtime.
         * </pre>
         */
        public boolean hasScore() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required uint32 score = 2;</code>
         *
         * <pre>
         * The number of goals scored by the team during normal play and overtime.
         * </pre>
         */
        public int getScore() {
          return score_;
        }
        /**
         * <code>required uint32 score = 2;</code>
         *
         * <pre>
         * The number of goals scored by the team during normal play and overtime.
         * </pre>
         */
        public Builder setScore(int value) {
          bitField0_ |= 0x00000002;
          score_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 score = 2;</code>
         *
         * <pre>
         * The number of goals scored by the team during normal play and overtime.
         * </pre>
         */
        public Builder clearScore() {
          bitField0_ = (bitField0_ & ~0x00000002);
          score_ = 0;
          onChanged();
          return this;
        }

        private int redCards_ ;
        /**
         * <code>required uint32 red_cards = 3;</code>
         *
         * <pre>
         * The number of red cards issued to the team since the beginning of the game.
         * </pre>
         */
        public boolean hasRedCards() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required uint32 red_cards = 3;</code>
         *
         * <pre>
         * The number of red cards issued to the team since the beginning of the game.
         * </pre>
         */
        public int getRedCards() {
          return redCards_;
        }
        /**
         * <code>required uint32 red_cards = 3;</code>
         *
         * <pre>
         * The number of red cards issued to the team since the beginning of the game.
         * </pre>
         */
        public Builder setRedCards(int value) {
          bitField0_ |= 0x00000004;
          redCards_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 red_cards = 3;</code>
         *
         * <pre>
         * The number of red cards issued to the team since the beginning of the game.
         * </pre>
         */
        public Builder clearRedCards() {
          bitField0_ = (bitField0_ & ~0x00000004);
          redCards_ = 0;
          onChanged();
          return this;
        }

        private java.util.List<Integer> yellowCardTimes_ = java.util.Collections.emptyList();
        private void ensureYellowCardTimesIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            yellowCardTimes_ = new java.util.ArrayList<Integer>(yellowCardTimes_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated uint32 yellow_card_times = 4 [packed = true];</code>
         *
         * <pre>
         * The amount of time (in microseconds) left on each yellow card issued to the team.
         * If no yellow cards are issued, this array has no elements.
         * Otherwise, times are ordered from smallest to largest.
         * </pre>
         */
        public java.util.List<Integer>
            getYellowCardTimesList() {
          return java.util.Collections.unmodifiableList(yellowCardTimes_);
        }
        /**
         * <code>repeated uint32 yellow_card_times = 4 [packed = true];</code>
         *
         * <pre>
         * The amount of time (in microseconds) left on each yellow card issued to the team.
         * If no yellow cards are issued, this array has no elements.
         * Otherwise, times are ordered from smallest to largest.
         * </pre>
         */
        public int getYellowCardTimesCount() {
          return yellowCardTimes_.size();
        }
        /**
         * <code>repeated uint32 yellow_card_times = 4 [packed = true];</code>
         *
         * <pre>
         * The amount of time (in microseconds) left on each yellow card issued to the team.
         * If no yellow cards are issued, this array has no elements.
         * Otherwise, times are ordered from smallest to largest.
         * </pre>
         */
        public int getYellowCardTimes(int index) {
          return yellowCardTimes_.get(index);
        }
        /**
         * <code>repeated uint32 yellow_card_times = 4 [packed = true];</code>
         *
         * <pre>
         * The amount of time (in microseconds) left on each yellow card issued to the team.
         * If no yellow cards are issued, this array has no elements.
         * Otherwise, times are ordered from smallest to largest.
         * </pre>
         */
        public Builder setYellowCardTimes(
            int index, int value) {
          ensureYellowCardTimesIsMutable();
          yellowCardTimes_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 yellow_card_times = 4 [packed = true];</code>
         *
         * <pre>
         * The amount of time (in microseconds) left on each yellow card issued to the team.
         * If no yellow cards are issued, this array has no elements.
         * Otherwise, times are ordered from smallest to largest.
         * </pre>
         */
        public Builder addYellowCardTimes(int value) {
          ensureYellowCardTimesIsMutable();
          yellowCardTimes_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 yellow_card_times = 4 [packed = true];</code>
         *
         * <pre>
         * The amount of time (in microseconds) left on each yellow card issued to the team.
         * If no yellow cards are issued, this array has no elements.
         * Otherwise, times are ordered from smallest to largest.
         * </pre>
         */
        public Builder addAllYellowCardTimes(
            Iterable<? extends Integer> values) {
          ensureYellowCardTimesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, yellowCardTimes_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated uint32 yellow_card_times = 4 [packed = true];</code>
         *
         * <pre>
         * The amount of time (in microseconds) left on each yellow card issued to the team.
         * If no yellow cards are issued, this array has no elements.
         * Otherwise, times are ordered from smallest to largest.
         * </pre>
         */
        public Builder clearYellowCardTimes() {
          yellowCardTimes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }

        private int yellowCards_ ;
        /**
         * <code>required uint32 yellow_cards = 5;</code>
         *
         * <pre>
         * The total number of yellow cards ever issued to the team.
         * </pre>
         */
        public boolean hasYellowCards() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>required uint32 yellow_cards = 5;</code>
         *
         * <pre>
         * The total number of yellow cards ever issued to the team.
         * </pre>
         */
        public int getYellowCards() {
          return yellowCards_;
        }
        /**
         * <code>required uint32 yellow_cards = 5;</code>
         *
         * <pre>
         * The total number of yellow cards ever issued to the team.
         * </pre>
         */
        public Builder setYellowCards(int value) {
          bitField0_ |= 0x00000010;
          yellowCards_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 yellow_cards = 5;</code>
         *
         * <pre>
         * The total number of yellow cards ever issued to the team.
         * </pre>
         */
        public Builder clearYellowCards() {
          bitField0_ = (bitField0_ & ~0x00000010);
          yellowCards_ = 0;
          onChanged();
          return this;
        }

        private int timeouts_ ;
        /**
         * <code>required uint32 timeouts = 6;</code>
         *
         * <pre>
         * The number of timeouts this team can still call.
         * If in a timeout right now, that timeout is excluded.
         * </pre>
         */
        public boolean hasTimeouts() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>required uint32 timeouts = 6;</code>
         *
         * <pre>
         * The number of timeouts this team can still call.
         * If in a timeout right now, that timeout is excluded.
         * </pre>
         */
        public int getTimeouts() {
          return timeouts_;
        }
        /**
         * <code>required uint32 timeouts = 6;</code>
         *
         * <pre>
         * The number of timeouts this team can still call.
         * If in a timeout right now, that timeout is excluded.
         * </pre>
         */
        public Builder setTimeouts(int value) {
          bitField0_ |= 0x00000020;
          timeouts_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 timeouts = 6;</code>
         *
         * <pre>
         * The number of timeouts this team can still call.
         * If in a timeout right now, that timeout is excluded.
         * </pre>
         */
        public Builder clearTimeouts() {
          bitField0_ = (bitField0_ & ~0x00000020);
          timeouts_ = 0;
          onChanged();
          return this;
        }

        private int timeoutTime_ ;
        /**
         * <code>required uint32 timeout_time = 7;</code>
         *
         * <pre>
         * The number of microseconds of timeout this team can use.
         * </pre>
         */
        public boolean hasTimeoutTime() {
          return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>required uint32 timeout_time = 7;</code>
         *
         * <pre>
         * The number of microseconds of timeout this team can use.
         * </pre>
         */
        public int getTimeoutTime() {
          return timeoutTime_;
        }
        /**
         * <code>required uint32 timeout_time = 7;</code>
         *
         * <pre>
         * The number of microseconds of timeout this team can use.
         * </pre>
         */
        public Builder setTimeoutTime(int value) {
          bitField0_ |= 0x00000040;
          timeoutTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 timeout_time = 7;</code>
         *
         * <pre>
         * The number of microseconds of timeout this team can use.
         * </pre>
         */
        public Builder clearTimeoutTime() {
          bitField0_ = (bitField0_ & ~0x00000040);
          timeoutTime_ = 0;
          onChanged();
          return this;
        }

        private int goalie_ ;
        /**
         * <code>required uint32 goalie = 8;</code>
         *
         * <pre>
         * The pattern number of this team's goalie.
         * </pre>
         */
        public boolean hasGoalie() {
          return ((bitField0_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>required uint32 goalie = 8;</code>
         *
         * <pre>
         * The pattern number of this team's goalie.
         * </pre>
         */
        public int getGoalie() {
          return goalie_;
        }
        /**
         * <code>required uint32 goalie = 8;</code>
         *
         * <pre>
         * The pattern number of this team's goalie.
         * </pre>
         */
        public Builder setGoalie(int value) {
          bitField0_ |= 0x00000080;
          goalie_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint32 goalie = 8;</code>
         *
         * <pre>
         * The pattern number of this team's goalie.
         * </pre>
         */
        public Builder clearGoalie() {
          bitField0_ = (bitField0_ & ~0x00000080);
          goalie_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:SSL_Referee.TeamInfo)
      }

      static {
        defaultInstance = new TeamInfo(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:SSL_Referee.TeamInfo)
    }

    private int bitField0_;
    public static final int PACKET_TIMESTAMP_FIELD_NUMBER = 1;
    private long packetTimestamp_;
    /**
     * <code>required uint64 packet_timestamp = 1;</code>
     *
     * <pre>
     * The UNIX timestamp when the packet was sent, in microseconds.
     * Divide by 1,000,000 to get a time_t.
     * </pre>
     */
    public boolean hasPacketTimestamp() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 packet_timestamp = 1;</code>
     *
     * <pre>
     * The UNIX timestamp when the packet was sent, in microseconds.
     * Divide by 1,000,000 to get a time_t.
     * </pre>
     */
    public long getPacketTimestamp() {
      return packetTimestamp_;
    }

    public static final int STAGE_FIELD_NUMBER = 2;
    private Stage stage_;
    /**
     * <code>required .SSL_Referee.Stage stage = 2;</code>
     */
    public boolean hasStage() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .SSL_Referee.Stage stage = 2;</code>
     */
    public Stage getStage() {
      return stage_;
    }

    public static final int STAGE_TIME_LEFT_FIELD_NUMBER = 3;
    private int stageTimeLeft_;
    /**
     * <code>optional sint32 stage_time_left = 3;</code>
     *
     * <pre>
     * The number of microseconds left in the stage.
     * The following stages have this value; the rest do not:
     * NORMAL_FIRST_HALF
     * NORMAL_HALF_TIME
     * NORMAL_SECOND_HALF
     * EXTRA_TIME_BREAK
     * EXTRA_FIRST_HALF
     * EXTRA_HALF_TIME
     * EXTRA_SECOND_HALF
     * PENALTY_SHOOTOUT_BREAK
     * If the stage runs over its specified time, this value
     * becomes negative.
     * </pre>
     */
    public boolean hasStageTimeLeft() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 stage_time_left = 3;</code>
     *
     * <pre>
     * The number of microseconds left in the stage.
     * The following stages have this value; the rest do not:
     * NORMAL_FIRST_HALF
     * NORMAL_HALF_TIME
     * NORMAL_SECOND_HALF
     * EXTRA_TIME_BREAK
     * EXTRA_FIRST_HALF
     * EXTRA_HALF_TIME
     * EXTRA_SECOND_HALF
     * PENALTY_SHOOTOUT_BREAK
     * If the stage runs over its specified time, this value
     * becomes negative.
     * </pre>
     */
    public int getStageTimeLeft() {
      return stageTimeLeft_;
    }

    public static final int COMMAND_FIELD_NUMBER = 4;
    private Command command_;
    /**
     * <code>required .SSL_Referee.Command command = 4;</code>
     */
    public boolean hasCommand() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required .SSL_Referee.Command command = 4;</code>
     */
    public Command getCommand() {
      return command_;
    }

    public static final int COMMAND_COUNTER_FIELD_NUMBER = 5;
    private int commandCounter_;
    /**
     * <code>required uint32 command_counter = 5;</code>
     *
     * <pre>
     * The number of commands issued since startup (mod 2^32).
     * </pre>
     */
    public boolean hasCommandCounter() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 command_counter = 5;</code>
     *
     * <pre>
     * The number of commands issued since startup (mod 2^32).
     * </pre>
     */
    public int getCommandCounter() {
      return commandCounter_;
    }

    public static final int COMMAND_TIMESTAMP_FIELD_NUMBER = 6;
    private long commandTimestamp_;
    /**
     * <code>required uint64 command_timestamp = 6;</code>
     *
     * <pre>
     * The UNIX timestamp when the command was issued, in microseconds.
     * This value changes only when a new command is issued, not on each packet.
     * </pre>
     */
    public boolean hasCommandTimestamp() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required uint64 command_timestamp = 6;</code>
     *
     * <pre>
     * The UNIX timestamp when the command was issued, in microseconds.
     * This value changes only when a new command is issued, not on each packet.
     * </pre>
     */
    public long getCommandTimestamp() {
      return commandTimestamp_;
    }

    public static final int YELLOW_FIELD_NUMBER = 7;
    private TeamInfo yellow_;
    /**
     * <code>required .SSL_Referee.TeamInfo yellow = 7;</code>
     *
     * <pre>
     * Information about the two teams.
     * </pre>
     */
    public boolean hasYellow() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required .SSL_Referee.TeamInfo yellow = 7;</code>
     *
     * <pre>
     * Information about the two teams.
     * </pre>
     */
    public TeamInfo getYellow() {
      return yellow_;
    }
    /**
     * <code>required .SSL_Referee.TeamInfo yellow = 7;</code>
     *
     * <pre>
     * Information about the two teams.
     * </pre>
     */
    public TeamInfoOrBuilder getYellowOrBuilder() {
      return yellow_;
    }

    public static final int BLUE_FIELD_NUMBER = 8;
    private TeamInfo blue_;
    /**
     * <code>required .SSL_Referee.TeamInfo blue = 8;</code>
     */
    public boolean hasBlue() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required .SSL_Referee.TeamInfo blue = 8;</code>
     */
    public TeamInfo getBlue() {
      return blue_;
    }
    /**
     * <code>required .SSL_Referee.TeamInfo blue = 8;</code>
     */
    public TeamInfoOrBuilder getBlueOrBuilder() {
      return blue_;
    }

    private void initFields() {
      packetTimestamp_ = 0L;
      stage_ = Stage.NORMAL_FIRST_HALF_PRE;
      stageTimeLeft_ = 0;
      command_ = Command.HALT;
      commandCounter_ = 0;
      commandTimestamp_ = 0L;
      yellow_ = TeamInfo.getDefaultInstance();
      blue_ = TeamInfo.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPacketTimestamp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCommand()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCommandCounter()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCommandTimestamp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasYellow()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBlue()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getYellow().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getBlue().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, packetTimestamp_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, stage_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, stageTimeLeft_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, command_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, commandCounter_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt64(6, commandTimestamp_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, yellow_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, blue_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, packetTimestamp_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, stage_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, stageTimeLeft_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, command_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, commandCounter_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(6, commandTimestamp_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, yellow_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, blue_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static SSL_Referee parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SSL_Referee parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SSL_Referee parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SSL_Referee parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SSL_Referee parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SSL_Referee parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static SSL_Referee parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static SSL_Referee parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static SSL_Referee parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SSL_Referee parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SSL_Referee prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SSL_Referee}
     *
     * <pre>
     * Each UDP packet contains one of these messages.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SSL_Referee)
        SSL_RefereeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SslReferee.internal_static_SSL_Referee_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SslReferee.internal_static_SSL_Referee_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SSL_Referee.class, Builder.class);
      }

      // Construct using SslReferee.SSL_Referee.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getYellowFieldBuilder();
          getBlueFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        packetTimestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        stage_ = Stage.NORMAL_FIRST_HALF_PRE;
        bitField0_ = (bitField0_ & ~0x00000002);
        stageTimeLeft_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        command_ = Command.HALT;
        bitField0_ = (bitField0_ & ~0x00000008);
        commandCounter_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        commandTimestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (yellowBuilder_ == null) {
          yellow_ = TeamInfo.getDefaultInstance();
        } else {
          yellowBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (blueBuilder_ == null) {
          blue_ = TeamInfo.getDefaultInstance();
        } else {
          blueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SslReferee.internal_static_SSL_Referee_descriptor;
      }

      public SSL_Referee getDefaultInstanceForType() {
        return SSL_Referee.getDefaultInstance();
      }

      public SSL_Referee build() {
        SSL_Referee result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SSL_Referee buildPartial() {
        SSL_Referee result = new SSL_Referee(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.packetTimestamp_ = packetTimestamp_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.stage_ = stage_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.stageTimeLeft_ = stageTimeLeft_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.command_ = command_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.commandCounter_ = commandCounter_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.commandTimestamp_ = commandTimestamp_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (yellowBuilder_ == null) {
          result.yellow_ = yellow_;
        } else {
          result.yellow_ = yellowBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (blueBuilder_ == null) {
          result.blue_ = blue_;
        } else {
          result.blue_ = blueBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SSL_Referee) {
          return mergeFrom((SSL_Referee)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SSL_Referee other) {
        if (other == SSL_Referee.getDefaultInstance()) return this;
        if (other.hasPacketTimestamp()) {
          setPacketTimestamp(other.getPacketTimestamp());
        }
        if (other.hasStage()) {
          setStage(other.getStage());
        }
        if (other.hasStageTimeLeft()) {
          setStageTimeLeft(other.getStageTimeLeft());
        }
        if (other.hasCommand()) {
          setCommand(other.getCommand());
        }
        if (other.hasCommandCounter()) {
          setCommandCounter(other.getCommandCounter());
        }
        if (other.hasCommandTimestamp()) {
          setCommandTimestamp(other.getCommandTimestamp());
        }
        if (other.hasYellow()) {
          mergeYellow(other.getYellow());
        }
        if (other.hasBlue()) {
          mergeBlue(other.getBlue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPacketTimestamp()) {
          
          return false;
        }
        if (!hasStage()) {
          
          return false;
        }
        if (!hasCommand()) {
          
          return false;
        }
        if (!hasCommandCounter()) {
          
          return false;
        }
        if (!hasCommandTimestamp()) {
          
          return false;
        }
        if (!hasYellow()) {
          
          return false;
        }
        if (!hasBlue()) {
          
          return false;
        }
        if (!getYellow().isInitialized()) {
          
          return false;
        }
        return getBlue().isInitialized();
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SSL_Referee parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SSL_Referee) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long packetTimestamp_ ;
      /**
       * <code>required uint64 packet_timestamp = 1;</code>
       *
       * <pre>
       * The UNIX timestamp when the packet was sent, in microseconds.
       * Divide by 1,000,000 to get a time_t.
       * </pre>
       */
      public boolean hasPacketTimestamp() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 packet_timestamp = 1;</code>
       *
       * <pre>
       * The UNIX timestamp when the packet was sent, in microseconds.
       * Divide by 1,000,000 to get a time_t.
       * </pre>
       */
      public long getPacketTimestamp() {
        return packetTimestamp_;
      }
      /**
       * <code>required uint64 packet_timestamp = 1;</code>
       *
       * <pre>
       * The UNIX timestamp when the packet was sent, in microseconds.
       * Divide by 1,000,000 to get a time_t.
       * </pre>
       */
      public Builder setPacketTimestamp(long value) {
        bitField0_ |= 0x00000001;
        packetTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 packet_timestamp = 1;</code>
       *
       * <pre>
       * The UNIX timestamp when the packet was sent, in microseconds.
       * Divide by 1,000,000 to get a time_t.
       * </pre>
       */
      public Builder clearPacketTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000001);
        packetTimestamp_ = 0L;
        onChanged();
        return this;
      }

      private Stage stage_ = Stage.NORMAL_FIRST_HALF_PRE;
      /**
       * <code>required .SSL_Referee.Stage stage = 2;</code>
       */
      public boolean hasStage() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .SSL_Referee.Stage stage = 2;</code>
       */
      public Stage getStage() {
        return stage_;
      }
      /**
       * <code>required .SSL_Referee.Stage stage = 2;</code>
       */
      public Builder setStage(Stage value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        stage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .SSL_Referee.Stage stage = 2;</code>
       */
      public Builder clearStage() {
        bitField0_ = (bitField0_ & ~0x00000002);
        stage_ = Stage.NORMAL_FIRST_HALF_PRE;
        onChanged();
        return this;
      }

      private int stageTimeLeft_ ;
      /**
       * <code>optional sint32 stage_time_left = 3;</code>
       *
       * <pre>
       * The number of microseconds left in the stage.
       * The following stages have this value; the rest do not:
       * NORMAL_FIRST_HALF
       * NORMAL_HALF_TIME
       * NORMAL_SECOND_HALF
       * EXTRA_TIME_BREAK
       * EXTRA_FIRST_HALF
       * EXTRA_HALF_TIME
       * EXTRA_SECOND_HALF
       * PENALTY_SHOOTOUT_BREAK
       * If the stage runs over its specified time, this value
       * becomes negative.
       * </pre>
       */
      public boolean hasStageTimeLeft() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 stage_time_left = 3;</code>
       *
       * <pre>
       * The number of microseconds left in the stage.
       * The following stages have this value; the rest do not:
       * NORMAL_FIRST_HALF
       * NORMAL_HALF_TIME
       * NORMAL_SECOND_HALF
       * EXTRA_TIME_BREAK
       * EXTRA_FIRST_HALF
       * EXTRA_HALF_TIME
       * EXTRA_SECOND_HALF
       * PENALTY_SHOOTOUT_BREAK
       * If the stage runs over its specified time, this value
       * becomes negative.
       * </pre>
       */
      public int getStageTimeLeft() {
        return stageTimeLeft_;
      }
      /**
       * <code>optional sint32 stage_time_left = 3;</code>
       *
       * <pre>
       * The number of microseconds left in the stage.
       * The following stages have this value; the rest do not:
       * NORMAL_FIRST_HALF
       * NORMAL_HALF_TIME
       * NORMAL_SECOND_HALF
       * EXTRA_TIME_BREAK
       * EXTRA_FIRST_HALF
       * EXTRA_HALF_TIME
       * EXTRA_SECOND_HALF
       * PENALTY_SHOOTOUT_BREAK
       * If the stage runs over its specified time, this value
       * becomes negative.
       * </pre>
       */
      public Builder setStageTimeLeft(int value) {
        bitField0_ |= 0x00000004;
        stageTimeLeft_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 stage_time_left = 3;</code>
       *
       * <pre>
       * The number of microseconds left in the stage.
       * The following stages have this value; the rest do not:
       * NORMAL_FIRST_HALF
       * NORMAL_HALF_TIME
       * NORMAL_SECOND_HALF
       * EXTRA_TIME_BREAK
       * EXTRA_FIRST_HALF
       * EXTRA_HALF_TIME
       * EXTRA_SECOND_HALF
       * PENALTY_SHOOTOUT_BREAK
       * If the stage runs over its specified time, this value
       * becomes negative.
       * </pre>
       */
      public Builder clearStageTimeLeft() {
        bitField0_ = (bitField0_ & ~0x00000004);
        stageTimeLeft_ = 0;
        onChanged();
        return this;
      }

      private Command command_ = Command.HALT;
      /**
       * <code>required .SSL_Referee.Command command = 4;</code>
       */
      public boolean hasCommand() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required .SSL_Referee.Command command = 4;</code>
       */
      public Command getCommand() {
        return command_;
      }
      /**
       * <code>required .SSL_Referee.Command command = 4;</code>
       */
      public Builder setCommand(Command value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        command_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .SSL_Referee.Command command = 4;</code>
       */
      public Builder clearCommand() {
        bitField0_ = (bitField0_ & ~0x00000008);
        command_ = Command.HALT;
        onChanged();
        return this;
      }

      private int commandCounter_ ;
      /**
       * <code>required uint32 command_counter = 5;</code>
       *
       * <pre>
       * The number of commands issued since startup (mod 2^32).
       * </pre>
       */
      public boolean hasCommandCounter() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 command_counter = 5;</code>
       *
       * <pre>
       * The number of commands issued since startup (mod 2^32).
       * </pre>
       */
      public int getCommandCounter() {
        return commandCounter_;
      }
      /**
       * <code>required uint32 command_counter = 5;</code>
       *
       * <pre>
       * The number of commands issued since startup (mod 2^32).
       * </pre>
       */
      public Builder setCommandCounter(int value) {
        bitField0_ |= 0x00000010;
        commandCounter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 command_counter = 5;</code>
       *
       * <pre>
       * The number of commands issued since startup (mod 2^32).
       * </pre>
       */
      public Builder clearCommandCounter() {
        bitField0_ = (bitField0_ & ~0x00000010);
        commandCounter_ = 0;
        onChanged();
        return this;
      }

      private long commandTimestamp_ ;
      /**
       * <code>required uint64 command_timestamp = 6;</code>
       *
       * <pre>
       * The UNIX timestamp when the command was issued, in microseconds.
       * This value changes only when a new command is issued, not on each packet.
       * </pre>
       */
      public boolean hasCommandTimestamp() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required uint64 command_timestamp = 6;</code>
       *
       * <pre>
       * The UNIX timestamp when the command was issued, in microseconds.
       * This value changes only when a new command is issued, not on each packet.
       * </pre>
       */
      public long getCommandTimestamp() {
        return commandTimestamp_;
      }
      /**
       * <code>required uint64 command_timestamp = 6;</code>
       *
       * <pre>
       * The UNIX timestamp when the command was issued, in microseconds.
       * This value changes only when a new command is issued, not on each packet.
       * </pre>
       */
      public Builder setCommandTimestamp(long value) {
        bitField0_ |= 0x00000020;
        commandTimestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 command_timestamp = 6;</code>
       *
       * <pre>
       * The UNIX timestamp when the command was issued, in microseconds.
       * This value changes only when a new command is issued, not on each packet.
       * </pre>
       */
      public Builder clearCommandTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000020);
        commandTimestamp_ = 0L;
        onChanged();
        return this;
      }

      private TeamInfo yellow_ = TeamInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          TeamInfo, TeamInfo.Builder, TeamInfoOrBuilder> yellowBuilder_;
      /**
       * <code>required .SSL_Referee.TeamInfo yellow = 7;</code>
       *
       * <pre>
       * Information about the two teams.
       * </pre>
       */
      public boolean hasYellow() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required .SSL_Referee.TeamInfo yellow = 7;</code>
       *
       * <pre>
       * Information about the two teams.
       * </pre>
       */
      public TeamInfo getYellow() {
        if (yellowBuilder_ == null) {
          return yellow_;
        } else {
          return yellowBuilder_.getMessage();
        }
      }
      /**
       * <code>required .SSL_Referee.TeamInfo yellow = 7;</code>
       *
       * <pre>
       * Information about the two teams.
       * </pre>
       */
      public Builder setYellow(TeamInfo value) {
        if (yellowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          yellow_ = value;
          onChanged();
        } else {
          yellowBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>required .SSL_Referee.TeamInfo yellow = 7;</code>
       *
       * <pre>
       * Information about the two teams.
       * </pre>
       */
      public Builder setYellow(
          TeamInfo.Builder builderForValue) {
        if (yellowBuilder_ == null) {
          yellow_ = builderForValue.build();
          onChanged();
        } else {
          yellowBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>required .SSL_Referee.TeamInfo yellow = 7;</code>
       *
       * <pre>
       * Information about the two teams.
       * </pre>
       */
      public Builder mergeYellow(TeamInfo value) {
        if (yellowBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              yellow_ != TeamInfo.getDefaultInstance()) {
            yellow_ =
              TeamInfo.newBuilder(yellow_).mergeFrom(value).buildPartial();
          } else {
            yellow_ = value;
          }
          onChanged();
        } else {
          yellowBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>required .SSL_Referee.TeamInfo yellow = 7;</code>
       *
       * <pre>
       * Information about the two teams.
       * </pre>
       */
      public Builder clearYellow() {
        if (yellowBuilder_ == null) {
          yellow_ = TeamInfo.getDefaultInstance();
          onChanged();
        } else {
          yellowBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>required .SSL_Referee.TeamInfo yellow = 7;</code>
       *
       * <pre>
       * Information about the two teams.
       * </pre>
       */
      public TeamInfo.Builder getYellowBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getYellowFieldBuilder().getBuilder();
      }
      /**
       * <code>required .SSL_Referee.TeamInfo yellow = 7;</code>
       *
       * <pre>
       * Information about the two teams.
       * </pre>
       */
      public TeamInfoOrBuilder getYellowOrBuilder() {
        if (yellowBuilder_ != null) {
          return yellowBuilder_.getMessageOrBuilder();
        } else {
          return yellow_;
        }
      }
      /**
       * <code>required .SSL_Referee.TeamInfo yellow = 7;</code>
       *
       * <pre>
       * Information about the two teams.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          TeamInfo, TeamInfo.Builder, TeamInfoOrBuilder>
          getYellowFieldBuilder() {
        if (yellowBuilder_ == null) {
          yellowBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              TeamInfo, TeamInfo.Builder, TeamInfoOrBuilder>(
                  getYellow(),
                  getParentForChildren(),
                  isClean());
          yellow_ = null;
        }
        return yellowBuilder_;
      }

      private TeamInfo blue_ = TeamInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          TeamInfo, TeamInfo.Builder, TeamInfoOrBuilder> blueBuilder_;
      /**
       * <code>required .SSL_Referee.TeamInfo blue = 8;</code>
       */
      public boolean hasBlue() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required .SSL_Referee.TeamInfo blue = 8;</code>
       */
      public TeamInfo getBlue() {
        if (blueBuilder_ == null) {
          return blue_;
        } else {
          return blueBuilder_.getMessage();
        }
      }
      /**
       * <code>required .SSL_Referee.TeamInfo blue = 8;</code>
       */
      public Builder setBlue(TeamInfo value) {
        if (blueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          blue_ = value;
          onChanged();
        } else {
          blueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .SSL_Referee.TeamInfo blue = 8;</code>
       */
      public Builder setBlue(
          TeamInfo.Builder builderForValue) {
        if (blueBuilder_ == null) {
          blue_ = builderForValue.build();
          onChanged();
        } else {
          blueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .SSL_Referee.TeamInfo blue = 8;</code>
       */
      public Builder mergeBlue(TeamInfo value) {
        if (blueBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              blue_ != TeamInfo.getDefaultInstance()) {
            blue_ =
              TeamInfo.newBuilder(blue_).mergeFrom(value).buildPartial();
          } else {
            blue_ = value;
          }
          onChanged();
        } else {
          blueBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>required .SSL_Referee.TeamInfo blue = 8;</code>
       */
      public Builder clearBlue() {
        if (blueBuilder_ == null) {
          blue_ = TeamInfo.getDefaultInstance();
          onChanged();
        } else {
          blueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>required .SSL_Referee.TeamInfo blue = 8;</code>
       */
      public TeamInfo.Builder getBlueBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getBlueFieldBuilder().getBuilder();
      }
      /**
       * <code>required .SSL_Referee.TeamInfo blue = 8;</code>
       */
      public TeamInfoOrBuilder getBlueOrBuilder() {
        if (blueBuilder_ != null) {
          return blueBuilder_.getMessageOrBuilder();
        } else {
          return blue_;
        }
      }
      /**
       * <code>required .SSL_Referee.TeamInfo blue = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          TeamInfo, TeamInfo.Builder, TeamInfoOrBuilder>
          getBlueFieldBuilder() {
        if (blueBuilder_ == null) {
          blueBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              TeamInfo, TeamInfo.Builder, TeamInfoOrBuilder>(
                  getBlue(),
                  getParentForChildren(),
                  isClean());
          blue_ = null;
        }
        return blueBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:SSL_Referee)
    }

    static {
      defaultInstance = new SSL_Referee(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SSL_Referee)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SSL_Referee_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_SSL_Referee_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SSL_Referee_TeamInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_SSL_Referee_TeamInfo_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\021ssl_referee.proto\"\335\010\n\013SSL_Referee\022\030\n\020p" +
      "acket_timestamp\030\001 \002(\004\022!\n\005stage\030\002 \002(\0162\022.S" +
      "SL_Referee.Stage\022\027\n\017stage_time_left\030\003 \001(" +
      "\021\022%\n\007command\030\004 \002(\0162\024.SSL_Referee.Command" +
      "\022\027\n\017command_counter\030\005 \002(\r\022\031\n\021command_tim" +
      "estamp\030\006 \002(\004\022%\n\006yellow\030\007 \002(\0132\025.SSL_Refer" +
      "ee.TeamInfo\022#\n\004blue\030\010 \002(\0132\025.SSL_Referee." +
      "TeamInfo\032\247\001\n\010TeamInfo\022\014\n\004name\030\001 \002(\t\022\r\n\005s" +
      "core\030\002 \002(\r\022\021\n\tred_cards\030\003 \002(\r\022\035\n\021yellow_" +
      "card_times\030\004 \003(\rB\002\020\001\022\024\n\014yellow_cards\030\005 \002",
      "(\r\022\020\n\010timeouts\030\006 \002(\r\022\024\n\014timeout_time\030\007 \002" +
      "(\r\022\016\n\006goalie\030\010 \002(\r\"\321\002\n\005Stage\022\031\n\025NORMAL_F" +
      "IRST_HALF_PRE\020\000\022\025\n\021NORMAL_FIRST_HALF\020\001\022\024" +
      "\n\020NORMAL_HALF_TIME\020\002\022\032\n\026NORMAL_SECOND_HA" +
      "LF_PRE\020\003\022\026\n\022NORMAL_SECOND_HALF\020\004\022\024\n\020EXTR" +
      "A_TIME_BREAK\020\005\022\030\n\024EXTRA_FIRST_HALF_PRE\020\006" +
      "\022\024\n\020EXTRA_FIRST_HALF\020\007\022\023\n\017EXTRA_HALF_TIM" +
      "E\020\010\022\031\n\025EXTRA_SECOND_HALF_PRE\020\t\022\025\n\021EXTRA_" +
      "SECOND_HALF\020\n\022\032\n\026PENALTY_SHOOTOUT_BREAK\020" +
      "\013\022\024\n\020PENALTY_SHOOTOUT\020\014\022\r\n\tPOST_GAME\020\r\"\322",
      "\002\n\007Command\022\010\n\004HALT\020\000\022\010\n\004STOP\020\001\022\020\n\014NORMAL" +
      "_START\020\002\022\017\n\013FORCE_START\020\003\022\032\n\026PREPARE_KIC" +
      "KOFF_YELLOW\020\004\022\030\n\024PREPARE_KICKOFF_BLUE\020\005\022" +
      "\032\n\026PREPARE_PENALTY_YELLOW\020\006\022\030\n\024PREPARE_P" +
      "ENALTY_BLUE\020\007\022\026\n\022DIRECT_FREE_YELLOW\020\010\022\024\n" +
      "\020DIRECT_FREE_BLUE\020\t\022\030\n\024INDIRECT_FREE_YEL" +
      "LOW\020\n\022\026\n\022INDIRECT_FREE_BLUE\020\013\022\022\n\016TIMEOUT" +
      "_YELLOW\020\014\022\020\n\014TIMEOUT_BLUE\020\r\022\017\n\013GOAL_YELL" +
      "OW\020\016\022\r\n\tGOAL_BLUE\020\017"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_SSL_Referee_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_SSL_Referee_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_SSL_Referee_descriptor,
        new String[] { "PacketTimestamp", "Stage", "StageTimeLeft", "Command", "CommandCounter", "CommandTimestamp", "Yellow", "Blue", });
    internal_static_SSL_Referee_TeamInfo_descriptor =
      internal_static_SSL_Referee_descriptor.getNestedTypes().get(0);
    internal_static_SSL_Referee_TeamInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_SSL_Referee_TeamInfo_descriptor,
        new String[] { "Name", "Score", "RedCards", "YellowCardTimes", "YellowCards", "Timeouts", "TimeoutTime", "Goalie", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
